<?php

namespace Manage\Controller;

use Common\Controller\BaseController;
use Think\Page;
use Think\Upload;

class BasicInformationController extends BaseController
{
    //显示基本的信息
    public function index(){
        $departmentId = I("post.department_id");
        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        if($departmentId == ""){
            $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail")->count();
        }else{
            $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail")->where("department_id=".$departmentId)->count();
        }
        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        if($departmentId == ""){
            $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail")->limit($offset, $pages)->select();
        }else{
            $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail")->where("department_id=".$departmentId)
                ->limit($offset, $pages)->select();
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //删除信息
    public function deleteInformation(){

        $id = I("post.id");
        $personnelInformation = D("PersonnelInformation");
        $contract = $personnelInformation->field("id,contract_id")->where("bid=".$id)->find();
        $contract_id = $contract["contract_id"];
        $length = strlen($id);
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $contract_id = array($contract_id);
            $where = 'id in(' . implode(',', $id) . ')';
            $whereb = 'bid in(' . implode(',', $id) . ')';
            $wherec = 'id in(' . implode(',', $contract_id) . ')';
        }
        $basicInformation = D("BasicInformation");
        $list = $basicInformation->where($where)->delete();
        if($list){
            $personnelInformation = D("PersonnelInformation");
            $con = $personnelInformation->where($whereb)->delete();
        }
        if($con){
            $socialSecurityInformation = D("SocialSecurityInformation");
            $arr = $socialSecurityInformation->where($whereb)->delete();
        }
        if($arr){
            $contract = D("Contract");
            $condition = $contract->where($wherec)->delete();
        }
        if($condition){
            $bankInformation = D("BankInformation");
            $result = $bankInformation->where($whereb)->delete();
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    public function check(){
        $id = I("post.id");
        $basicInformation = D("BasicInformation");
        $result = $basicInformation->table("oa_basic_information as a")->join("left join oa_organizational_structure as b on b.id=a.department_id")
            ->join("left join oa_personnel_information as c on c.bid=a.id")->join("left join oa_education as d on d.id=c.education_id")->join("oa_contract as p on p.id=c.contract_id")
            ->join("left join oa_card as e on e.id=c.cardType_id")->join("left join oa_rank as f on f.id=c.rank_id")->join("left join oa_position as g on g.id=c.position_id")
            ->join("left join oa_source as h on h.id=c.source_id")->join("left join oa_company as i on i.id=p.company_id")
            ->join("left join oa_contract_type as j on j.id=p.contractType_id")
            ->join("left join oa_leave_type as k on k.id=p.leaveType_id")->join("left join oa_category as l on l.id=a.category_id")
            ->join("left join oa_social_security_information as m on m.bid=a.id")
            ->join("left join oa_bank_information as o on o.bid=a.id")
            ->field("a.id,a.name,a.uname,a.unumber,a.sex,a.leader,a.workEmail,a.telephone,a.weixin,a.ownEmail,a.birthday,a.constellation,a.qq,a.category_id,
                    l.name as category,a.national,a.married,a.native,a.photo,d.name as education,c.school,c.hobby,e.name as cardType,c.cardNumber,
                    f.name as rand,g.name as position,c.coreMembers,h.name as source,c.referees,c.hiredate,c.correctionDate,c.homeAddress,c.education_id,
                    c.cardType_id,c.rank_id,c.address,c.contactPerson,c.contactPersonPhone,c.file,c.payType,c.integral,i.name as company,j.name as contractType,p.contractStart,
                    p.signedYears,p.contractEnd,p.isRenewal_id,p.leaveDate,k.name as leaveType,p.leaveReason,c.status,c.lengthService,c.oldName,p.contractType_id,p.company_id,
                    a.department_id,b.department_name as department,m.householdType,m.payLand,m.payBase,m.foudBase,m.medical,m.pension,
                    m.unemployment,m.fund,m.medicalTwo,m.pensionTwo, m.unemploymentTwo,m.hurted,m.birthed,m.fundTwo,o.bankCardNumber,o.openBank,
                    o.accountTitle,o.isDefault,c.lengthService,c.contract_id,m.socialStarting,m.fundStarting")->where("a.id=".$id)->find();
        $payAccount = D("Payaccount");
        $list = $payAccount->field("id,name")->select();
        foreach($list as $key=>$value){
            if($value["id"] == $result["payAccount"]){
                $result["payAccount"] = $value["name"];
            }
        }
        if($result['birthday'] != "0"){
            $result['birthday'] = date("Y-m-d",$result["birthday"]);
        }else{
            $result['birthday'] = null;
        }
        if($result['hiredate'] != "0"){
            $result['hiredate'] = date("Y-m-d",$result["hiredate"]);
        }else{
            $result['hiredate'] = null;
        }
        if($result['contractStart'] != "0"){
            $result['contractStart'] = date("Y-m-d",$result["contractStart"]);
        }else{
            $result['contractStart'] = null;
        }
        if($result['contractEnd'] != "0"){
            $result['contractEnd'] = date("Y-m-d",$result["contractEnd"]);
        }else{
            $result['contractEnd'] = null;
        }
        if($result['leaveDate'] != "0"){
            $result['leaveDate'] = date("Y-m-d",$result["leaveDate"]);
        }else{
            $result['leaveDate'] = null;
        }
        if($result['correctionDate'] != "0"){
            $result['correctionDate'] = date("Y-m-d",$result["correctionDate"]);
        }else{
            $result['correctionDate'] = null;
        }

        if($result['socialStarting'] != "0"){
            $result['socialStarting'] = date("Y-m",$result["socialStarting"]);
        }else{
            $result['socialStarting'] = null;
        }
        if($result['fundStarting'] != "0"){
            $result['fundStarting'] = date("Y-m",$result["fundStarting"]);
        }else{
            $result['fundStarting'] = null;
        }

        $result["openBank"] = explode(',',$result["openBank"]);
        $result["bankCardNumber"] = explode(',',$result["bankCardNumber"]);
        $result["accountTitle"] = explode(',',$result["accountTitle"]);
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //显示员工状态
    public function personnelStatus(){
        $basicInformation = D("BasicInformation");
        $departmentId = I("post.department_id");
        if($departmentId != ""){
            $organizationalStructure = D("OrganizationalStructure");
            $where['pidTwo'] = array('like','%'.$departmentId.'%');
            $con = $organizationalStructure->field("id,pid,department_name,pidTwo")->where($where)->select();
            foreach($con as $key=>$value){
                $arr[] = $value["id"];
            }
        }
        $arrs = implode(",",$arr);
        if($departmentId){
            //试用
            $trial = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("a.department_id in (".$arrs.")"." and b.status='4' and a.department_id != 0")->count();
            //正式
            $formal = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("a.department_id in (".$arrs.")"." and b.status='1' and a.department_id != 0")->count();
            //离职
            $departure = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("a.department_id in (".$arrs.")"." and b.status='2' and a.department_id != 0")->count();
        }else{
            $trial = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("b.status='4' and a.department_id != 0")->count();
            $formal= $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("b.status='1' and a.department_id != 0")->count();
            $departure = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_organizational_structure as c on c.id=a.department_id")->field('a.department_id,b.id,b.cardType_id,b.status')
                ->where("b.status='2' and a.department_id != 0")->count();
        }
        $all = $formal+$trial+$departure;
        $result=array(
            "all" => $all,
            "formal"=>$formal,
            "trial"=>$trial,
            "departure"=>$departure
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //点击显示不同部门的员工的状态和信息
    public function personneStatusInformation(){
        //部门id
        $departmentId = I("post.department_id");
        $organizationalStructure = D("OrganizationalStructure");
        if($departmentId != ""){
            $where['pidTwo'] = array('like','%'.$departmentId.'%');
            $con = $organizationalStructure->field("id,pid,department_name,pidTwo")->where($where)->select();
            foreach($con as $key=>$value){
                $arr[] = $value["id"];
            }
        }
        $arrs = implode(",",$arr);
        //状态id
        $status = I("post.status");
        $pages = I("pages");
        $basicInformation = D("BasicInformation");

        if($status && $departmentId){
            $count = $basicInformation->table("oa_basic_information as a")
                ->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("a.department_id in (".$arrs.") and c.status='{$status}'")->count();
        }
        if($status && $departmentId==""){
            $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("c.status='{$status}'")->count();
        }
        if($status=="" && $departmentId){
            $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("a.department_id in (".$arrs.")")->count();
        }
        if($status=="" && $departmentId==""){
            $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->count();
        }
        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        if($status && $departmentId){
            $list = $basicInformation->table("oa_basic_information as a")
                ->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,b.pid,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("a.department_id in (".$arrs.") and c.status='{$status}'")->limit($offset, $pages)->select();
        }
        if($status && $departmentId==""){
            $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("c.status='{$status}'")->limit($offset, $pages)->select();
        }
        if($status=="" && $departmentId){
            $list = $basicInformation->table("oa_basic_information as a")
                ->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,b.pid,a.workEmail,c.status,c.lengthService,a.department_id")
                ->where("a.department_id in (".$arrs.")")->limit($offset, $pages)->select();
        }
        if($status=="" && $departmentId==""){
            $list = $basicInformation->table("oa_basic_information as a")
                ->join("oa_organizational_structure as b on b.id=a.department_id")
                ->join("oa_personnel_information as c on c.bid=a.id")
                ->field("a.id,a.name,a.unumber,b.department_name as department,a.telephone,a.workEmail,c.status,c.lengthService,a.department_id")
                ->limit($offset, $pages)->select();
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }


    //基础信息
    public function Basic()
    {
        $id = I("post.id");
        $basicInformation = D("BasicInformation");
        $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_category as d on d.id=a.category_id")
            ->field("a.id,a.name,a.uname,a.unumber,a.sex,b.department_name as departmentName,a.leader,d.name as category,a.workEmail,a.telephone,a.weixin,a.ownEmail,a.birthday,a.constellation,a.qq,a.national,a.married,a.native,a.photo")
            ->where("id=" . $id)->find();
        $list['sex'] = $list['sex'] == 0 ? '女' : '男';
        $list['photo'] = $_SERVER['SERVER_NAME'].$list['photo'];
        $list['birthday'] = date("Y-m-d",$list["birthday"]);
        //查出所有的id，页面点击下一页的时候显示下一个人的信息
        $next = $basicInformation->field("id,name")->select();
        $result = array(
            'result' => $list,
            'next' => $next
        );
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加基础信息
    public function addBasic()
    {
        $data['name'] = I("post.name");
        $data['uname'] = I("post.uname");

        //查询出工号规则
        $workingRules = D("WorkingRules");
        $condition = $workingRules->field("id,digits,startingValue,is_auto")->select();
        if($condition){
            foreach($condition as $k=>$v){
                $arr["digits"] = $v["digits"];
                $arr["startingValue"] = $v["startingValue"];
                $arr["is_auto"] = $v["is_auto"];
            }
            //查询出以经存在的工号，并且取出最大值
            $basicInformation = D("BasicInformation");
            $maxNumber = $basicInformation->field("id,unumber")->order("cast(unumber as signed)"."desc")->select();
            if($maxNumber[0]["unumber"]){
                $maxNum = $maxNumber[0]["unumber"];
            }else{
                $maxNum = $arr["startingValue"];
            }
            if($arr["is_auto"] == "2" && $maxNumber[0]["unumber"]){
                $unumber['unumber'] = $maxNum + 1;
                $data['unumber'] = I("post.unumber");
            }elseif($arr["is_auto"] == "2" && !$maxNumber[0]["unumber"]){
                $unumber['unumber'] = $maxNum;
                $data['unumber'] = I("post.unumber");
            }else{
                $data['unumber'] = I("post.unumber");
            }
        }
        //获取的
        $data['department_id'] = I("post.department_id");
        $data['leader'] = I("post.leader");
        //获取的是ID
        $data['category_id'] = I("post.category_id");
        $data['workEmail'] = I("post.workEmail");
        $data['telephone'] = I("post.telephone");
        $data['weixin'] = I("post.weixin");
        $data['ownEmail'] = I("post.ownEmail");
        $data['birthday'] = strtotime(I("post.birthday"));
        $data['constellation'] = I("post.constellation");
        $data['qq'] = I("post.qq");
        $data['national'] = I("post.national");
        $data['married'] = I("post.married");
        $data['native'] = I("post.native");
        $data['photo'] = I("post.photo");

        $datas = $basicInformation->create($data);
        if ($datas) {
            $list = $basicInformation->add($datas);
        }
        $result = array(
            "result"=>$list,
            "unumber"=>$unumber,
            "workingRules"=>$arr
        );
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //上传照片接口
    public function uploadPhoto()
    {
        $upload = new \Think\Upload();
        $upload->maxSize = 3145728;
        $upload->exts = array('jpg', 'gif', 'png', 'jpeg');// 设置附件上传类型
        $upload->rootPath ='./Public/Uploads/photo/';
        $upload->saveName = array('uniqid', mt_rand(1, 999999) . '_' . md5(uniqid()));
        $upload->subName = array('date', 'Ymd');
        $info = $upload->upload();
        if (!$info) {
            $this->error($upload->getError());
        } else {
            $data["file"] = "/Public/Uploads/photo/" . $info[0]['savepath'] . $info[0]['savename'];
        }
        if ($data) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $data);
    }

    //修改基础信息
    public function updateBasic()
    {
        $id = I("post.id");
        $data['name'] = I("post.name");
        $data['uname'] = I("post.uname");
        $data['unumber'] = I("post.unumber");
        //获取的
        $data['department_id'] = I("post.department_id");
        //获取的是Id
//        $data['posts_id'] = I("post.posts_id");
        $data['leader'] = I("post.leader");
        //获取的是ID
        $data['category_id'] = I("post.category_id");
        $data['workEmail'] = I("post.workEmail");
        $data['telephone'] = I("post.telephone");
        $data['weixin'] = I("post.weixin");
        $data['ownEmail'] = I("post.ownEmail");
        $data['birthday'] = strtotime(I("post.birthday"));
        $data['constellation'] = I("post.constellation");
        $data['qq'] = I("post.qq");
        $data['national'] = I("post.national");
        $data['married'] = I("post.married");
        $data['native'] = I("post.native");
        $data['photo'] = I("post.photo");
        $basicInformation = D("BasicInformation");
        $datas = $basicInformation->create($data);
        if ($datas) {
            $result = $basicInformation->where("id = " . $id)->save($datas);
        }

        self::jsons($error=0, $result);
    }

    //下拉框显示人员类别
    public function category()
    {
        $category = D("Category");
        $result = $category->field('id,name')->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加人员类别
    public function addCategory()
    {
        $data["name"] = I("post.name");
        $category = D("Category");
        $datas = $category->create($data);
        if ($datas) {
            $result = $category->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改人员类别
    public function updateCategory()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $category = D("Category");
        $datas = $category->create($data);
        if ($datas) {
            $result = $category->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除人员类别
    public function deleteCategory()
    {
        $id = I("post.id");
        $length = strlen($id);
        $category = D("Category");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $category->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //显示人事信息数据
    public function personnel()
    {
        $id = I("post.id");
        $personnelInformation = D("PersonnelInformation");
        $list = $personnelInformation->table("oa_personnel_information as a")->join("oa_education as b on b.id=a.education_id")
            ->join("oa_contract as i on i.pid=a.id")
            ->join("oa_card as c on c.id=a.cardType_id")->join("oa_rank as d on d.id=a.rank_id")
            ->join("oa_position as e on e.id=a.position_id")->join("oa_source as f on f.id=a.source_id")
            ->join("oa_contract_renewal as g on g.bid=a.id")->join("oa_leave_type as h on h.id=a.leaveType_id")

            ->field("a.id,a.bid,b.name as educationName,a.school,a.hobby,c.name as cardName,a.cardNumber,d.name as rankName,
            e.name as positionNamw,a.coreMembers,f.name as sourceNamw,a.hiredate,a.correctionDate,a.homeAddress,a.address,
            a.contactPerson,a.contactPersonPhone,a.file,a.payType,a.integral,a.discount,a.contractStart,a.signedYears,a.contractEnd,
            a.isRenewal_id,h.name as leaveTypeName,a.leaveReason,a.referees,a.status,a.lengthService")
            ->where("bid=" . $id)->find();

        //返回是否续签的字段，0为否，1为是，如果为1就显示续签的时间
        $isRenewal = $list["isRenewal_id"];

        $list['hiredate'] = date('Y-m-d', $list['hiredate']);
        $list['correctionDate'] = date('Y-m-d', $list['correctionDate']);
        $list['contractStart'] = date('Y-m-d', $list['contractStart']);
        $list['contractEnd'] = date('Y-m-d', $list['contractEnd']);
        $list['leaveDate'] = date('Y-m-d', $list['leaveDate']);
        $result = array(
            'isRenewal' => $isRenewal,
            'result' => $list
        );
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加人事信息
    public function addPersonnel()
    {
        //传递过来id，来保存是属于谁的人事信息
        $data['bid'] = I("post.id");
        //保存学历id，链接学历表
        $data['education_id'] = I("post.education_id");
        $data['school'] = I("post.school");
        $data['hobby'] = I("post.hobby");
        //获取的是Id
        $data['cardType_id'] = I("post.cardType_id");
        $data['cardNumber'] = I("post.cardNumber");


        //链接职级表
        $data['rank_id'] = I("post.rank_id");
        //链接职位表
        $data['position_id'] = I("post.position");
        $data['coreMembers'] = I("post.coreMembers");
        //招聘来源
        $data['source_id'] = I("post.source_id");
        $data['referees'] = I("post.referees");
        //入职日期
        $data['hiredate'] = strtotime(I("post.hiredate"));
        //转正日期
        $data['correctionDate'] = strtotime(I("post.correctionDate"));
        $data['homeAddress'] = I("post.homeAddress");
        $data['address'] = I("post.address");
        $data['contactPerson'] = I("post.contactPerson");
        $data['contactPersonPhone'] = I("post.contactPersonPhone");
        $data['file'] = I("post.file");
        $data['payType'] = I("post.payType");
        $data['integral'] = I("post.integral");

        //增加到合同表里
        $arr['company_id'] = I("post.company_id");
        $arr["contractType_id"] = I("post.contractType_id");
        $arr['contractStart'] = strtotime(I("post.contractStart"));
        $arr['signedYears'] = I("post.signedYears");
        $arr['contractEnd'] = strtotime(I("post.contractEnd"));
        $arr['isRenewal_id'] = I("post.isRenewal_id");


        //离职日期
        $arr['leaveDate'] = strtotime(I("post.leaveDate"));
        $arr['leaveType_id'] = I("post.leaveType_id");
        $arr['leaveReason'] = I("post.leaveReason");
        $contract = D("Contract");
        $arrs = $contract->create($arr);
        if($arrs){
            $contract_id = $contract->add($arrs);
        }
        $data['contract_id'] = $contract_id;
        $data['discount'] = I("post.discount");
        $data['oldName'] = I("post.oldName");
//        if($data["leaveDate"] == ""){
//            if($data['hiredate']<$data['correctionDate']){
//                $data["status"] = '4';
//            }
//            if($data['correctionDate']){
//                $data["status"] = '1';
//            }
//        }else{
//            $data["status"] = '2';
//        }
        $data["leaveDate"] = $arr['leaveDate'];
        if($data["leaveDate"]){
            $data["status"] = '2';
        }else{
            if($data['correctionDate']){
                $data["status"] = '1';
            }else{
                $data["status"] = '4';
            }
        }
        //工龄
        $data["lengthService"] = round((time()- $data['hiredate'])/31536000,2);
        $personnelInformation = D("PersonnelInformation");
        $datas = $personnelInformation->create($data);
        if ($datas) {
            $result = $personnelInformation->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改人事信息
    public function updatePersonnel()
    {
        //传递过来id，来保存是属于谁的人事信息
        $data['bid'] = I("post.id");
        //传递过来合同id
        $contractId = I("post.contract_id");
        //保存学历id，链接学历表
        $data['education_id'] = I("post.education");
        $data['school'] = I("post.school");
        $data['hobby'] = I("post.hobby");
        //获取的是Id
        $data['cardType_id'] = I("post.cardType_id");
        $data['cardNumber'] = I("post.cardNumber");

        //链接职级表
        $data['rank_id'] = I("post.rank_id");
        //链接职位表
        $data['position_id'] = I("post.position_id");
        $data['coreMembers'] = I("post.coreMembers");
        //招聘来源
        $data['source_id'] = I("post.source_id");
        $data['referees'] = I("post.referees");
        $data['hiredate'] = strtotime(I("post.hiredate"));
        $data['correctionDate'] = strtotime(I("post.correctionDate"));
        $data['homeAddress'] = I("post.homeAddress");
        $data['address'] = I("post.address");
        $data['contactPerson'] = I("post.contactPerson");
        $data['contactPersonPhone'] = I("post.contactPersonPhone");
        $data['file'] = I("post.file");
        $data['payType'] = I("post.payType");
        $data['integral'] = I("post.integral");
        //增加到合同表里
        $arr['company_id'] = I("post.company_id");
        $arr["contractType_id"] = I("post.contractType_id");
        $arr['contractStart'] = strtotime(I("post.contractStart"));
        $arr['signedYears'] = I("post.signedYears");
        $arr['contractEnd'] = strtotime(I("post.contractEnd"));
        $arr['isRenewal_id'] = I("post.isRenewal_id");
        //离职日期
        $arr['leaveDate'] = strtotime(I("post.leaveDate"));
        $arr['leaveType_id'] = I("post.leaveType_id");
        $arr['leaveReason'] = I("post.leaveReason");
        $contract = D("Contract");
        $arrs = $contract->create($arr);
        if($arrs){
            $contract->where("id=".$contractId)->save($arrs);
        }

        $data['discount'] = I("post.discount");

        if($data["leaveDate"] == ""){
            if($data['hiredate']<$data['correctionDate']){
                $data["status"] = '4';
            }
            if($data['correctionDate']){
                $data["status"] = '1';
            }
        }else{
            $data["status"] = '2';
        }
        //工龄
        $data["lengthService"] = round((time()- $data['hiredate'])/31536000,2);
        $personnelInformation = D("PersonnelInformation");
        $datas = $personnelInformation->create($data);
        if ($datas) {
            $result = $personnelInformation->where("bid = " . $data['bid'])->save($datas);
        }
//        if ($result) {
//            $error = 0;
//        } else {
//            $error = 1;
//        }
        self::jsons($error=0, $result);
    }

    //下拉选择学历
    public function education()
    {
        $education = D("Education");
        $result = $education->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加学历
    public function addEducation()
    {
        $data["name"] = I("post.name");
        $education = D("Education");
        $datas = $education->create($data);
        if ($datas) {
            $result = $education->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改学历
    public function updateEducation()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $education = D("Education");
        $datas = $education->create($data);
        if ($datas) {
            $result = $education->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除学历
    public function deleteEducation()
    {
        $id = I("post.id");
        $length = strlen($id);
        $education = D("Education");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $education->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下拉选择证件
    public function card()
    {
        $cardType = D("Card");
        $result = $cardType->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加证件
    public function addCard()
    {
        $data["name"] = I("post.name");
        $cardType = D("Card");
        $datas = $cardType->create($data);
        if ($datas) {
            $result = $cardType->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改证件
    public function updateCard()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $cardType = D("Card");
        $datas = $cardType->create($data);
        if ($datas) {
            $result = $cardType->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除证件
    public function deleteCard()
    {
        $id = I("post.id");
        $length = strlen($id);
        $cardType = D("Card");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $cardType->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下拉选择职级
    public function rank()
    {
        $rank = D("Rank");
        $result = $rank->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加职级
    public function addRank()
    {
        $data["name"] = I("post.name");
        $rank = D("Rank");
        $datas = $rank->create($data);
        if ($datas) {
            $result = $rank->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改职级
    public function updateRank()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $rank = D("Rank");
        $datas = $rank->create($data);
        if ($datas) {
            $result = $rank->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //删除职级
    public function deleteRank()
    {
        $id = I("post.id");
        $length = strlen($id);
        $rank = D("Rank");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $rank->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下拉选择职位
    public function position()
    {
        $position = D("Position");
        $result = $position->table("oa_position as a")->join("oa_organizational_structure as b on b.id=a.oid")->field("a.id,a.name,a.oid,b.department_name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加职位
    public function addPosition()
    {
        $data["name"] = I("post.name");
        $data["oid"] = I("post.oid");
        $position = D("Position");
        $datas = $position->create($data);
        if ($datas) {
            $result = $position->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改职位
    public function updatePosition()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $data["oid"] = I("post.oid");
        $position = D("Position");
        $datas = $position->create($data);
        if ($datas) {
            $result = $position->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除职位
    public function deletePosition()
    {
        $id = I("post.id");
        $length = strlen($id);
        $position = D("Position");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $position->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下来选择招聘来源
    public function source()
    {
        $source = D("Source");
        $result = $source->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加招聘来源
    public function addSource()
    {
        $data["name"] = I("post.name");
        $source = D("Source");
        $datas = $source->create($data);
        if ($datas) {
            $result = $source->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改招聘来源
    public function updateSource()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $source = D("Source");
        $datas = $source->create($data);
        if ($datas) {
            $result = $source->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除招聘来源
    public function deleteSource()
    {
        $id = I("post.id");
        $length = strlen($id);
        $source = D("Source");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $source->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下拉选择离职类别
    public function leave()
    {
        $leave = D("LeaveType");
        $result = $leave->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加人员类别
    public function addLeave()
    {
        $data["name"] = I("post.name");
        $leave = D("LeaveType");
        $datas = $leave->create($data);
        if ($datas) {
            $result = $leave->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改人员类别
    public function updateLeave()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $leave = D("LeaveType");
        $datas = $leave->create($data);
        if ($datas) {
            $result = $leave->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除人员类别
    public function deleteLeave()
    {
        $id = I("post.id");
        $length = strlen($id);
        $leave = D("LeaveType");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $leave->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //10.工号规则设置
    public function workingSet(){
        //位数
        $data["digits"] = I("post.digits");
        //起始值
        $data["startingValue"] = I("post.startingValue");
        //是否自动生成
        $data["is_auto"] = I("post.is_auto");
        $workingRules = D("WorkingRules");
        $datas = $workingRules->create($data);
        if ($datas) {
            $result = $workingRules->add($datas);

        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //显示户口性质
    public function householdType(){
        $payland = D("Payland");
        $result = $payland->field("id,city,householdType")->select();
        if($result || $result==""){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //增加户口性质
    public function addHouseholdType(){
        //显示省市，前台插件拼接成省市字符串传递过来
        $data["city"] = I("post.city");
        $data["householdType"] = I("post.householdType");
        $payland = D("Payland");
        $list = $payland->field("id,city,householdType")->select();
        foreach($list as $key=>$value){
            $arr["city"] = $value["city"];
            $arr["householdType"] = $value["householdType"];
            if($data["city"] == $arr["city"] && $data["householdType"] == $arr["householdType"]){
                self::jsons($error=2,$result="您增加的城市和户口类型已经存在");
            }
        }
        $datas = $payland->create($data);
        if($datas){
            $result = $payland->add($datas);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //修改户口性质
    public function updateHouseholdType(){
        $id = I("post.id");
        $data["city"] = I("post.city");
        $data["householdType"] = I("post.householdType");
        $payland = D("Payland");
        $datas = $payland->create($data);
        if($datas){
            $result = $payland->where("id=".$id)->save($datas);
        }
        if($result || $result == ""){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //删除户口性质
    public function deleteHouseholdType(){
        $id = I("post.id");
        $length = strlen($id);
        $payland = D("Payland");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $payland->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //显示方案
    public function socialSecurityPlan(){
        $socialSecurityPlan = D("SocialSecurityPlan");
        $result = $socialSecurityPlan->field("id,city,householdType,medicalBase,medicalRatio,pensionBase,pensionRatio,hurtedBase,
                    hurtedRatio,unemploymentBase,unemploymentRatio,birthedBase,birthedRatio,medicalRatioTwo,pensionRatioTwo,
                    hurtedRatioTwo,unemploymentRatioTwo,birthedRatioTwo,foudBase,foudRatio,foudRatioTwo,largeMedicalBase,largeMedicalRatio,
                    largeMedicalRatioTwo,effectiveDate,expiryDate,is_use,highestfoud,pensionHighestBase,hurtedHighestBase,unemploymentHighestBase,
                    birthedHighestBase,medicalHighestBase,largeMedicalHighestBase,medicalFixedFee,medicalFixedFeeTwo,pensionFixedFee,pensionFixedFeeTwo,
                    hurtedFixedFee,hurtedFixedFeeTwo,unemploymentFixedFee,unemploymentFixedFeeTwo,birthedFixedFee,birthedFixedFeeTwo,foudBaseFixedFee,
                    foudBaseFixedFeeTwo,largeMedicalFixedFee,largeMedicalFixedFeeTwo")->select();
        foreach ($result as &$val) {
            $val['effectiveDate'] = date('Y-m-d', $val['effectiveDate']);
            if($val["expiryDate"] != null){
                $val['expiryDate'] = date('Y-m-d', $val['expiryDate']);
            }
        }
        if($result || $result==""){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //社保城市级联
    public function cityLink(){
        $city = I("post.city");
        if($city){
            $payland = D("Payland");
            $result = $payland->field("id,city,householdType")->where("city='{$city}'")->select();
            if($result || $result==""){
                $error = 0;
            }else{
                $error = 1;
            }
        }
        self::jsons($error,$result);
    }

    //新增数据的时候判断缴纳地和户口类型是否已经存在
    public function cityIsExist(){
        $id = I("post.id");
        if(!$id){
            $data["city"] = I("post.city");//缴纳地
            $data["householdType"] = I("post.householdType");//户口性质
            if(I("post.effectiveDate")){
                $data["effectiveDate"] = strtotime(I("post.effectiveDate"));//生效日期
                if($data["effectiveDate"] < strtotime(date("Y-m-d",time()))){
                    $result=array("errors" => 2,"result"=>"生效日期不能小于当前日期");
                }
            }else{
                $data["effectiveDate"] = null;
            }
            $socialSecurityPlan = D("SocialSecurityPlan");
            $list = $socialSecurityPlan->field("id,city,householdType,effectiveDate,expiryDate,is_use,num")->select();
            if($list){
                foreach ($list as $key=>$value){
                    $arr["city"] = $value["city"];
                    $arr["householdType"] = $value["householdType"];
                    $arr["effectiveDate"] = $value["effectiveDate"];
                    $arr["expiryDate"] = $value["expiryDate"];
                    if($data["city"] == $arr["city"] && $data["householdType"] == $arr["householdType"]){
                        $result=array("errors" => 3,"result"=>"缴纳地下的这个类型的户口已经存在,确定还要新增么？");
                        //新增数据的时候如果城市和类型已经同时存在的有数据，就判断存在的数据的失效时间，如果失效时间为空的话，就是新加数据的生效时间的前一天
                        if($arr["expiryDate"] == "0" && $data["effectiveDate"] > $arr["effectiveDate"]){
                            $idata["expiryDate"] = date("Y-m-d",$data["effectiveDate"]-3600*24);
                        }else{
                            $idata["expiryDate"] = null;
                        }
                        //如果新增数据的生效日期比已存在的数据的生效日期要小的话，那么新增数据的失效日期就是已存在的数据的生效的前一天
                        if($data["effectiveDate"] < $arr["effectiveDate"]){
                            $idata["expiryDate"] = date("Y-m-d",$arr["effectiveDate"]-3600*24);
                        }else{
                            $idata["expiryDate"] = null;
                        }
                    }
                }
            }
        }else{
            if(I("post.effectiveDate")){
                $data["effectiveDate"] = strtotime(I("post.effectiveDate"));//生效日期
                if($data["effectiveDate"] < time()){
                    $result=array("errors" => 2,"result"=>"生效日期不能小于当前日期");
                }
            }else{
                $data["effectiveDate"] = null;
            }
            $socialSecurityPlan = D("SocialSecurityPlan");
            $list = $socialSecurityPlan->field("id,city,householdType,effectiveDate,expiryDate,is_use,num")->select();
                foreach ($list as $key=>$value){
                    $arr["effectiveDate"] = $value["effectiveDate"];
                    $arr["expiryDate"] = $value["expiryDate"];
                        //修改数据的时候如果城市和类型已经同时存在的有数据，就判断存在的数据的失效时间，如果失效时间为空的话，就是新加数据的生效时间的前一天
                        if($arr["expiryDate"] == "0" && $data["effectiveDate"] > $arr["effectiveDate"]){
                            $udata["expiryDate"] = date("Y-m-d",$data["effectiveDate"]-3600*24);
                        }else{
                            $udata["expiryDate"] = null;
                        }
                        //修改新增数据的生效日期比已存在的数据的生效日期要小的话，那么新增数据的失效日期就是已存在的数据的生效的前一天
                        if($data["effectiveDate"] < $arr["effectiveDate"]){
                            $udata["expiryDate"] = date("Y-m-d",$arr["effectiveDate"]-3600*24);
                        }else{
                            $udata["expiryDate"] = null;
                        }
                }
        }
        $result = array(
            "result"=>$result,
            "city" => $data["city"],
            "householdType" => $data["householdType"],
            "effectiveDate" => date("Y-m-d",$data["effectiveDate"]),
            "iexpiryDate" => $idata["expiryDate"],
            "uexpiryDate" => $udata["expiryDate"]
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //增加社保方案
    public function addSocialSecurityPlan(){
        $data["city"] = I("post.city");//缴纳地
        $data["householdType"] = I("post.householdType");//户口性质
        $data["effectiveDate"] = strtotime(I("post.effectiveDate"));//生效日期

        $data["medicalBase"] = I("post.medicalBase");//医疗基数
        $data["medicalRatio"] = I("post.medicalRatio");//医疗比例（个人）
        $data["pensionBase"] = I("post.pensionBase");//养老基数
        $data["pensionRatio"] = I("post.pensionRatio");//养老比例（个人）
        $data["hurtedBase"] = I("post.hurtedBase");//工伤基数
        $data["hurtedRatio"] = I("post.hurtedRatio");//工伤比例（个人）
        $data["unemploymentBase"] = I("post.unemploymentBase");//失业基数
        $data["unemploymentRatio"] = I("post.unemploymentRatio");//失业比例（个人）
        $data["birthedBase"] = I("post.birthedBase");//生育基数
        $data["birthedRatio"] = I("post.birthedRatio");//生育比例（个人）
        $data["medicalRatioTwo"] = I("post.medicalRatioTwo");//医疗比例（公司）
        $data["pensionRatioTwo"] = I("post.pensionRatioTwo");//养老比例（公司）
        $data["hurtedRatioTwo"] = I("post.hurtedRatioTwo");//工伤比例（公司）
        $data["unemploymentRatioTwo"] = I("post.unemploymentRatioTwo");//失业比例（公司）
        $data["birthedRatioTwo"] = I("post.birthedRatioTwo");//生育比例（公司）
        $data["foudBase"] = I("post.foudBase");//公积金基数
        $data["foudRatio"] = I("post.foudRatio");//公积金比例
        $data["foudRatioTwo"] = I("post.foudRatioTwo");//公积金比例
        $data["largeMedicalBase"] = I("post.largeMedicalBase");//大额医疗基数
        $data["largeMedicalRatio"] = I("post.largeMedicalRatio");//大额医疗比例
        $data["largeMedicalRatioTwo"] = I("post.largeMedicalRatioTwo");//大额医疗比例

        $data["medicalFixedFee"] = I("post.medicalFixedFee");//医疗固定费用（个人）
        $data["medicalFixedFeeTwo"] = I("post.medicalFixedFeeTwo");//固定医疗费用（公司）
        $data["pensionFixedFee"] = I("post.pensionFixedFee");//固定养老费用（个人）
        $data["pensionFixedFeeTwo"] = I("post.pensionFixedFeeTwo");//固定养老费用（公司）
        $data["hurtedFixedFee"] = I("post.hurtedFixedFee");//固定工伤费用（个人）
        $data["hurtedFixedFeeTwo"] = I("post.hurtedFixedFeeTwo");//固定工伤费用（公司）
        $data["unemploymentFixedFee"] = I("post.unemploymentFixedFee");//固定失业费用（个人）
        $data["unemploymentFixedFeeTwo"] = I("post.unemploymentFixedFeeTwo");//固定失业费用（公司）
        $data["birthedFixedFee"] = I("post.birthedFixedFee");//固定生育费用（个人）
        $data["birthedFixedFeeTwo"] = I("post.birthedFixedFeeTwo");//固定生育费用（公司）
        $data["foudBaseFixedFee"] = I("post.foudBaseFixedFee");//固定公积金费用（个人）
        $data["foudBaseFixedFeeTwo"] = I("post.foudBaseFixedFeeTwo");//固定公积金费用（公司）
        $data["largeMedicalFixedFee"] = I("post.largeMedicalFixedFee");//大额医疗费用（个人）
        $data["largeMedicalFixedFeeTwo"] = I("post.largeMedicalFixedFeeTwo");//大额医疗费用（公司）

        $data["pensionHighestBase"] = I("post.pensionHighestBase");//养老最高基数
        $data["hurtedHighestBase"] = I("post.hurtedHighestBase");//最高工伤基数
        $data["unemploymentHighestBase"] = I("post.unemploymentHighestBase");//最高失业基数
        $data["birthedHighestBase"] = I("post.birthedHighestBase");//最高生育基数
        $data["medicalHighestBase"] = I("post.medicalHighestBase");//最高医疗基数
        $data["largeMedicalHighestBase"] = I("post.largeMedicalHighestBase");//最高大额医疗基数

        $data["highestBase"] = I("post.highestBase");//最高基数
        $data["highestfoud"] = I("post.highestfoud");//最高公积金

        $socialSecurityPlan = D("SocialSecurityPlan");


        //接收失效日期
        if(I("post.iexpiryDate")){
            $udata["expiryDate"] = strtotime(I("post.iexpiryDate"));//失效日期
            $udatas = $socialSecurityPlan->create($udata);
            $socialSecurityPlan->where("city='{$data["city"]}' and householdType='{$data["householdType"]}' and expiryDate is null")
                ->save($udatas);
        }
        $data["num"] += 1;
        $datas = $socialSecurityPlan->create($data);
        if($datas){
            $result = $socialSecurityPlan->add($datas);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //修改社保方案（原来的数据不做修改，就是新增加一条）
    public function updateSocialSecurityPlan(){
        $id = I("post.id");
        $data["city"] = I("post.city");//缴纳地
        $data["householdType"] = I("post.householdType");//户口性质
        $data["effectiveDate"] = strtotime(I("post.effectiveDate"));//生效日期
        $data["expiryDate"] = strtotime(I("post.expiryDate"));//失效日期


        $data["medicalBase"] = I("post.medicalBase");//医疗基数
        $data["medicalRatio"] = I("post.medicalRatio");//医疗比例（个人）
        $data["pensionBase"] = I("post.pensionBase");//养老基数
        $data["pensionRatio"] = I("post.pensionRatio");//养老比例（个人）
        $data["hurtedBase"] = I("post.hurtedBase");//工伤基数
        $data["hurtedRatio"] = I("post.hurtedRatio");//工伤比例（个人）
        $data["unemploymentBase"] = I("post.unemploymentBase");//失业基数
        $data["unemploymentRatio"] = I("post.unemploymentRatio");//失业比例（个人）
        $data["birthedBase"] = I("post.birthedBase");//生育基数
        $data["birthedRatio"] = I("post.birthedRatio");//生育比例（个人）
        $data["medicalRatioTwo"] = I("post.medicalRatioTwo");//医疗比例（公司）
        $data["pensionRatioTwo"] = I("post.pensionRatioTwo");//养老比例（公司）
        $data["hurtedRatioTwo"] = I("post.hurtedRatioTwo");//工伤比例（公司）
        $data["unemploymentRatioTwo"] = I("post.unemploymentRatioTwo");//失业比例（公司）
        $data["birthedRatioTwo"] = I("post.birthedRatioTwo");//生育比例（公司）


        $data["medicalFixedFee"] = I("post.medicalFixedFee");//医疗固定费用（个人）
        $data["medicalFixedFeeTwo"] = I("post.medicalFixedFeeTwo");//固定医疗费用（公司）
        $data["pensionFixedFee"] = I("post.pensionFixedFee");//固定养老费用（个人）
        $data["pensionFixedFeeTwo"] = I("post.pensionFixedFeeTwo");//固定养老费用（公司）
        $data["hurtedFixedFee"] = I("post.hurtedFixedFee");//固定工伤费用（个人）
        $data["hurtedFixedFeeTwo"] = I("post.hurtedFixedFeeTwo");//固定工伤费用（公司）
        $data["unemploymentFixedFee"] = I("post.unemploymentFixedFee");//固定失业费用（个人）
        $data["unemploymentFixedFeeTwo"] = I("post.unemploymentFixedFeeTwo");//固定失业费用（公司）
        $data["birthedFixedFee"] = I("post.birthedFixedFee");//固定生育费用（个人）
        $data["birthedFixedFeeTwo"] = I("post.birthedFixedFeeTwo");//固定生育费用（公司）
        $data["foudBaseFixedFee"] = I("post.foudBaseFixedFee");//固定公积金费用（个人）
        $data["foudBaseFixedFeeTwo"] = I("post.foudBaseFixedFeeTwo");//固定公积金费用（公司）
        $data["largeMedicalFixedFee"] = I("post.largeMedicalFixedFee");//大额医疗费用（个人）
        $data["largeMedicalFixedFeeTwo"] = I("post.largeMedicalFixedFeeTwo");//大额医疗费用（公司）

        $data["foudBase"] = I("post.foudBase");//公积金基数
        $data["foudRatio"] = I("post.foudRatio");//公积金比例
        $data["foudRatioTwo"] = I("post.foudRatioTwo");//公积金比例
        $data["largeMedicalBase"] = I("post.largeMedicalBase");//大额医疗基数
        $data["largeMedicalRatio"] = I("post.largeMedicalRatio");//大额医疗比例
        $data["largeMedicalRatioTwo"] = I("post.largeMedicalRatioTwo");//大额医疗比例
        $data["highestBase"] = I("post.highestBase");//最高基数
        $data["highestfoud"] = I("post.highestfoud");//最高公积金


        $data["pensionHighestBase"] = I("post.pensionHighestBase");//养老最高基数
        $data["hurtedHighestBase"] = I("post.hurtedHighestBase");//最高工伤基数
        $data["unemploymentHighestBase"] = I("post.unemploymentHighestBase");//最高失业基数
        $data["birthedHighestBase"] = I("post.birthedHighestBase");//最高生育基数
        $data["medicalHighestBase"] = I("post.medicalHighestBase");//最高医疗基数
        $data["largeMedicalHighestBase"] = I("post.largeMedicalHighestBase");//最高大额医疗基数
        $socialSecurityPlan = D("SocialSecurityPlan");
        $datas = $socialSecurityPlan->create($data);
        if($datas){
            $result = $socialSecurityPlan->add($datas);
            if($result){
                $error = 0;
            }else{
                $error = 1;
            }
        }
        self::jsons($error,$result);
    }

    //删除社保方案
    public function deleteSocialSecurityPlan(){
        $id = I("post.id");
        $length = strlen($id);
        $socialSecurityPlan = D("SocialSecurityPlan");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $socialSecurityPlan->where($where." and is_use != '1'")->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //显示社保信息
    public function socialSecurityInformation()
    {
        $id = I("post.id");
        $socialSecurityInformation = D("SocialSecurityInformation");
        $result = $socialSecurityInformation->field("id,bid,householdType,payLand,payBase,foudBase,medical,pension,unemployment,fund,medicalTwo,pensionTwo,unemploymentTwo,hurted,
            birthed,fundTwo,payAccount,socialStarting,fundStarting")
            ->where("bid=" . $id)->find();
        $result["socialStarting"] = date("Y-m",$result["socialStarting"]);
        $result["fundStarting"] = date("Y-m",$result["fundStarting"]);
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加社保信息
    public function addSocialSecurityInformation(){
        $data['householdType'] = I("post.householdType");
        $data['payLand'] = I("post.payLand");
        $data['payAccount'] = I("post.payAccount");
        $data['payBase'] = I("post.payBase");//社保基数
        $data['foudBase'] = I("post.foudBase");//公积金基数
        $data['socialStarting'] = strtotime(I("post.socialStarting"));
        $data['fundStarting'] = strtotime(I("post.fundStarting"));

        $socialSecurityPlan = D("SocialSecurityPlan");
        $list = $socialSecurityPlan->field("id,city,householdType,medicalBase,medicalRatio,pensionBase,pensionRatio,hurtedBase,
                    hurtedRatio,unemploymentBase,unemploymentRatio,birthedBase,birthedRatio,medicalRatioTwo,pensionRatioTwo,
                    hurtedRatioTwo,unemploymentRatioTwo,birthedRatioTwo,foudBase,foudRatio,foudRatioTwo,largeMedicalBase,largeMedicalRatio,
                    largeMedicalRatioTwo,effectiveDate,expiryDate,is_use,highestfoud,pensionHighestBase,hurtedHighestBase,unemploymentHighestBase,
                    birthedHighestBase,medicalHighestBase,largeMedicalHighestBase,medicalFixedFee,medicalFixedFeeTwo,pensionFixedFee,pensionFixedFeeTwo,
                    hurtedFixedFee,hurtedFixedFeeTwo,unemploymentFixedFee,unemploymentFixedFeeTwo,birthedFixedFee,birthedFixedFeeTwo,foudBaseFixedFee,
                    foudBaseFixedFeeTwo,largeMedicalFixedFee,largeMedicalFixedFeeTwo")
           ->where("city='{$data['payLand']}' and householdType='{$data['householdType']}' and expiryDate is null") ->find();

        //医疗基数和社保基数对比，谁大用谁
        if($list["medicalBase"] > $data['payBase']){
            //用大的值乘以比例数
            $data["medical"] = round((($list["medicalBase"] * $list["medicalRatio"] + $list["medicalBase"] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
            $data["medicalTwo"] = round((($list["medicalBase"] * $list["medicalRatioTwo"] + $list["medicalBase"] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
            $data["is_use"] = "1";

            //把使用的基数存到数据库里
            $data["useMedical"] = $data["medical"];
            $data["useMedicalTwo"] = $data["medicalTwo"];
        }else{
            if($data['payBase']<$list["medicalHighestBase"]){
                $data["medical"] = round((($data['payBase'] * $list["medicalRatio"] + $data['payBase'] * $list["largeMedicalRatio"])/100) + $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                $data["medicalTwo"] = round((($data['payBase'] * $list["medicalRatioTwo"] + $data['payBase'] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                $data["is_use"] = "1";
                $data["useMedical"] = $data["medical"];
                $data["useMedicalTwo"] = $data["medicalTwo"];
                $data["is_use"] = "1";
            }else{
                $data["medical"] = round((($list['medicalHighestBase'] * $list["medicalRatio"] + $list['medicalHighestBase'] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                $data["medicalTwo"] = round((($list['medicalHighestBase'] * $list["medicalRatioTwo"] + $list['medicalHighestBase'] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                $data["is_use"] = "1";
                $data["useMedical"] = $data["medical"];
                $data["useMedicalTwo"] = $data["medicalTwo"];
                $data["is_use"] = "1";
            }

        }
        //养老基数
        if($list["pensionBase"] > $data['payBase']){
            $data["pension"] = round(($list["pensionBase"] * $list["pensionRatio"]/100) + $list["pensionFixedFee"],2);
            $data["pensionTwo"] = round($list["pensionBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
            $data["usePension"] = $data["pension"];
            $data["usePensionTwo"] = $data["pensionTwo"];
        }else{
            if($data["payBase"]<$list["pensionHighestBase"]){
                $data["pension"] = round($data["payBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                $data["pensionTwo"] = round($data["payBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                $data["usePension"] = $data["pension"];
                $data["usePensionTwo"] = $data["pensionTwo"];
            }else{
                $data["pension"] = round($list["pensionHighestBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                $data["pensionTwo"] = round($list["pensionHighestBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                $data["usePension"] = $data["pension"];
                $data["usePensionTwo"] = $data["pensionTwo"];
            }

        }
        //失业基数
        if($list["unemploymentBase"] > $data["payBase"]){
            $data["unemployment"] = round($list["unemploymentBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
            $data["unemploymentTwo"] = round($list["unemploymentBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
            $data["useUnemployment"] = $data["unemployment"];
            $data["useUnemploymentTwo"] = $data["unemploymentTwo"];
        }else{
            if($data["payBase"]<$list["unemploymentHighestBase"]){
                $data["unemployment"] = round($data["payBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                $data["unemploymentTwo"] = round($data["payBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                $data["useUnemployment"] = $data["unemployment"];
                $data["useUnemploymentTwo"] = $data["unemploymentTwo"];
            }else{
                $data["unemployment"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                $data["unemploymentTwo"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                $data["useUnemployment"] = $data["unemployment"];
                $data["useUnemploymentTwo"] = $data["unemploymentTwo"];
            }

        }
        //公积金基数
        if($list["foudBase"] > $data["foudBase"]){
            $data["fund"] = round($list["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
            $data["fundTwo"] = round($list["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
            $data["useFund"] = $data["fund"];
            $data["useFundTwo"] = $data["fundTwo"];
        }else{
            if($data["foudBase"]<$list["highestfoud"]){
                $data["fund"] = round($data["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                $data["fundTwo"] = round($data["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                $data["useFund"] = $data["fund"];
                $data["useFundTwo"] = $data["fundTwo"];
            }else{
                $data["fund"] = round($list["highestfoud"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                $data["fundTwo"] = round($list["highestfoud"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                $data["useFund"] = $data["fund"];
                $data["useFundTwo"] = $data["fundTwo"];
            }

        }
        //工伤
        if($list["hurtedBase"] > $data["payBase"]){
            $data["hurted"] = round($list["hurtedBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
            $data["hurtedTwo"] = round($list["hurtedBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
            $data["useHurted"] = $data["hurted"];
            $data["useHurtedTwo"] = $data["hurtedTwo"];
        }else{
            if($data["payBase"]<$list["hurtedHighestBase"]){
                $data["hurted"] = round($data["payBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                $data["hurtedTwo"] = round($data["payBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                $data["useHurted"] = $data["hurted"];
                $data["useHurtedTwo"] = $data["hurtedTwo"];
            }else{
                $data["hurted"] = round($list["hurtedHighestBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                $data["hurtedTwo"] = round($list["hurtedHighestBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                $data["useHurted"] = $data["hurted"];
                $data["useHurtedTwo"] = $data["hurtedTwo"];
            }

        }
        //生育
        if($list["birthedBase"] > $data["payBase"]){
            $data["birthed"] = round($list["birthedBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
            $data["birthedTwo"] = round($list["birthedBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
            $data["useBirthed"] = $data["birthed"];
            $data["useBirthedTwo"] = $data["birthedTwo"];
        }else{
            if($data["payBase"]<$list["birthedHighestBase"]){
                $data["birthed"] = round($data["payBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                $data["birthedTwo"] = round($data["payBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                $data["useBirthed"] = $data["birthed"];
                $data["useBirthedTwo"] = $data["birthedTwo"];
            }else{
                $data["birthed"] = round($list["birthedHighestBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                $data["birthedTwo"] = round($list["birthedHighestBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                $data["useBirthed"] = $data["birthed"];
                $data["useBirthedTwo"] = $data["birthedTwo"];
            }

        }
        $data["usePlanId"] = $list["id"];
        if ($data) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $data);
    }
    //增加社保信息
    public function addSocialSecurityInformationTwo(){
        $data['bid'] = I("post.id");
        $data['householdType'] = I("post.householdType");
        $data['payLand'] = I("post.payLand");
        $data['payAccount'] = I("post.payAccount");
        $data['payBase'] = I("post.payBase");//社保基数
        $data['foudBase'] = I("post.foudBase");//公积金基数

        $data['socialStarting'] = I("post.socialStarting");//社保起始月
        $data['fundStarting'] = I("post.fundStarting");//公积金起始月

        $data['medical'] = I("post.medical");
        $data['pension'] = I("post.pension");
        $data['unemployment'] = I("post.unemployment");
        $data['fund'] = I("post.fund");
        $data['medicalTwo'] = I("post.medicalTwo");
        $data['pensionTwo'] = I("post.pensionTwo");
        $data['unemploymentTwo'] = I("post.unemploymentTwo");
        $data['hurted'] = I("post.hurtedTwo");
        $data['birthed'] = I("post.birthedTwo");
        $data['fundTwo'] = I("post.fundTwo");
        $data["usePlanId"] = I("post.usePlanId");
        $data['socialStarting'] = strtotime(I("post.socialStarting"));
        $data['fundStarting'] = strtotime(I("post.fundStarting"));
        $socialSecurityInformation = D("SocialSecurityInformation");
        $datas = $socialSecurityInformation->create($data);
        if ($datas) {
            $result = $socialSecurityInformation->where("bid = " . $data["bid"])->add($datas);
            if($result){
                $error = 0;
            }else{
                $error = 1;
            }
        }
        self::jsons($error,$result);
    }

    public  function updateSocialSecurityInformationTwo(){
        $data['bid'] = I("post.id");
        $data['householdType'] = I("post.householdType");
        $data['payLand'] = I("post.payLand");
        $data['payAccount'] = I("post.payAccount");
        $data['payBase'] = I("post.payBase");//社保基数
        $data['foudBase'] = I("post.foudBase");//公积金基数
        $data['socialStarting'] = I("post.socialStarting");//社保起始月
        $data['fundStarting'] = I("post.fundStarting");//公积金起始月
        $data['medical'] = I("post.medical");
        $data['pension'] = I("post.pension");
        $data['unemployment'] = I("post.unemployment");
        $data['fund'] = I("post.fund");
        $data['medicalTwo'] = I("post.medicalTwo");
        $data['pensionTwo'] = I("post.pensionTwo");
        $data['unemploymentTwo'] = I("post.unemploymentTwo");
        $data['hurted'] = I("post.hurtedTwo");
        $data['birthed'] = I("post.birthedTwo");
        $data['fundTwo'] = I("post.fundTwo");

        $data['socialStarting'] = strtotime(I("post.socialStarting"));
        $data['fundStarting'] = strtotime(I("post.fundStarting"));
        $socialSecurityInformation = D("SocialSecurityInformation");
        $datas = $socialSecurityInformation->create($data);
        if ($datas) {
            $result = $socialSecurityInformation->where("bid = ".$data['bid'])->save($datas);
        }
        self::jsons($error=0, $result);
    }

    //下拉显示户口信息
    public function household()
    {
        $household = D("HouseholdType");
        $result = $household->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加户口类型
    public function addHousehold()
    {
        $data["name"] = I("post.name");
        $household = D("HouseholdType");
        $datas = $household->create($data);
        if ($datas) {
            $result = $household->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改户口类型
    public function updateHousehold()
    {
        $id = I("post.id");
        $data["name"] = I("post.name");
        $household = D("HouseholdType");
        $datas = $household->create($data);
        if ($datas) {
            $result = $household->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }

    //删除户口类型
    public function deleteHousehold()
    {
        $id = I("post.id");
        $length = strlen($id);
        $household = D("HouseholdType");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $household->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //下拉选择社保缴纳账户
    public function payAccount(){
        $payAccount = D("Payaccount");
        $result = $payAccount->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }
    //增加社保缴纳账户
    public function addPayAccount(){
        $data["name"] = I("post.name");
        $payAccount = D("Payaccount");
        $datas = $payAccount->create($data);
        if ($datas) {
            $result = $payAccount->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }
    //修改社保缴纳账户
    public function updatePayAccount(){
        $id = I("post.id");
        $data["name"] = I("post.name");
        $payAccount = D("Payaccount");
        $datas = $payAccount->create($data);
        if ($datas) {
            $result = $payAccount->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }
    //删除社保缴纳账户
    public function deletePayAccount(){
        $id = I("post.id");
        $length = strlen($id);
        $payAccount = D("Payaccount");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $payAccount->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //显示银行信息
    public function BankInformation(){
        $id = I("post.id");
        $bankInformation = D("BankInformation");
        $result = $bankInformation->field("id,openBank,bankCardNumber,accountTitle,isDefault")
            ->where("bid=" . $id)->find();
        $result["openBank"] = explode(',',$result["openBank"]);
        $result["bankCardNumber"] = explode(',',$result["bankCardNumber"]);
        $result["accountTitle"] = explode(',',$result["accountTitle"]);
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //增加银行卡信息
    public function addBankInformation(){
        $data["bid"] = I("post.id");
        if(I("post.bankCardNumber")){
            $bankCardNumber = implode(',',I("post.bankCardNumber"));
        }
        if(I("post.openBank")){
            $openBank = implode(',',I("post.openBank"));
        }
        if(I("post.accountTitle")){
            $accountTitle = implode(',',I("post.accountTitle"));
        }
        $data["bankCardNumber"] = $bankCardNumber;
        $data["openBank"] = $openBank;
        $data["accountTitle"] = $accountTitle;
        $data["isDefault"] = I("post.isDefault");
        $bankInformation = D("BankInformation");
        $datas = $bankInformation->create($data);
        if($datas){
            $result = $bankInformation->add($datas);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //修改银行卡信息
    public function updateBankInformation(){
        $id = I("post.id");
        if(I("post.bankCardNumber")){
            $bankCardNumber = implode(',',I("post.bankCardNumber"));
        }
        if(I("post.openBank")){
            $openBank = implode(',',I("post.openBank"));
        }
        if(I("post.accountTitle")){
            $accountTitle = implode(',',I("post.accountTitle"));
        }
        $data["bankCardNumber"] = $bankCardNumber;
        $data["openBank"] = $openBank;
        $data["accountTitle"] = $accountTitle;
        $data["isDefault"] = I("post.isDefault");
        $bankInformation = D("BankInformation");
        $datas = $bankInformation->create($data);
        if($datas){
            $result = $bankInformation->where("pid=".$id)->save($datas);
        }
//        if($result){
//            $error = 0;
//        }else{
//            $error = 1;
//        }
        self::jsons($error=0,$result);
    }

    //显示考勤信息
    public function attendanceInformation(){
        $id = I("post.id");
        $attendanceInformation = D("AttendanceInformation");
        $result = $attendanceInformation->table("oa_attendance_information as a")->join("oa_attendance as b on b.id = a.attendanceSystem")
            ->join("oa_shift as c on c.id=a.shift")
            ->field("a.id,a.bid,b.name as attendanceSystem,b.content,c.name as shift,c.content,a.restDayPlan")
            ->where("bid=" . $id)->find();
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }


    //增加考勤信息
    public function addAttendanceInformation(){
        $data['bid'] = I("post.id");
        $data['attendanceSystem'] = I("post.attendanceSystem");
        $data['shift'] = I("post.shift");
        $data['restDayPlan'] = I("post.restDayPlan");
        $attendanceInformation = D("AttendanceInformation");
        $datas = $attendanceInformation->create($data);
        if ($datas) {
            $result = $attendanceInformation->where("bid = " . $data["bid"])->save($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //修改考勤信息
    public function updateAttendanceInformation(){
        $data['bid'] = I("post.id");
        $data['attendanceSystem'] = I("post.attendanceSystem");
        $data['shift'] = I("post.shift");;
        $data['restDayPlan'] = I("post.restDayPlan");
        $attendanceInformation = D("AttendanceInformation");
        $datas = $attendanceInformation->create($data);
        if ($datas) {
            $result = $attendanceInformation->where("bid = " . $data["bid"])->save($datas);
        }
//        if ($result) {
//            $error = 0;
//        } else {
//            $error = 1;
//        }
        self::jsons($error=0, $result);
    }

    //上传简历方法
    public function uploadResume(){
        $upload = new \Think\Upload();
        $upload->maxSize = 3145728;
        $upload->exts = array('jpg','png', 'doc', 'docx', 'pdf');// 设置附件上传类型
        $upload->rootPath = './Public/Uploads/resume/';
        $upload->saveName = array('uniqid', mt_rand(1, 999999) . '_' . md5(uniqid()));
        $upload->subName = array('date', 'Ymd');
        $info = $upload->upload();
        if (!$info) {
            $this->error($upload->getError());
        } else {
            $data["file"] = "/Public/Uploads/resume/" . $info[0]['savepath'] . $info[0]['savename'];
            $data["oldName"] = $info[0]["name"];
        }
        if ($data) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $data);
    }

    //公司信息
    public function company(){
        $company = D("Company");
        $result = $company->field("id,name")->select();
        if ($result || $result=="") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }
    //增加公司信息
    public function addCompany(){
        $data["name"] = I("post.name");
        $company = D("Company");
        $datas = $company->create($data);
        if ($datas) {
            $result = $company->add($datas);
        }
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);

    }
    //修改公司信息
    public function updateCompany(){
        $id = I("post.id");
        $data["name"] = I("post.name");
        $company = D("Company");
        $datas = $company->create($data);
        if ($datas) {
            $result = $company->where("id = " . $id)->save($datas);
        }
        if ($result || $result == "") {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //删除公司信息
    public function deleteCompany(){
        $id = I("post.id");
        $length = strlen($id);
        $company = D("Company");
        if ($length == 1) {
            $where = 'id=' . $id;
        } else {
            $id = array($id);
            $where = 'id in(' . implode(',', $id) . ')';
        }
        $result = $company->where($where)->delete();
        if ($result) {
            $error = 0;
        } else {
            $error = 1;
        }
        self::jsons($error, $result);
    }

    //4.3员工社保档案列表
    public function socialFiles(){
        //社保起始月
        $socialStarTime = strtotime(I("socialStarTime"));

        $SocialEndTime = strtotime(I("socialEndTime"));

        if ($socialStarTime != '' && $SocialEndTime != '') {
            $map['e.socialStarting'] = array('between', "$socialStarTime,$SocialEndTime");
        }
        //公积金起始月
        $fundStarTime = strtotime(I("fundStarTime"));

        $fundEndTime = strtotime(I("fundEndTime"));

        if ($fundStarTime != '' && $fundEndTime != '') {
            $map['e.fundStarting'] = array('between', "$fundStarTime,$fundEndTime");
        }
        //工号
        if (I("unumber")) {
            $map['a.unumber'] = array('like', '%' . I('unumber') . '%');
        }
        //姓名
        if (I("name")) {
            $map['a.name'] = array('like', '%' . I('name') . '%');
        }
        //证件号
        if (I("cardNumber")) {
            $map['c.cardNumber'] = array('like', '%' . I('cardNumber') . '%');
        }
        //部门
        if (I("department_id")) {
            $map['a.department_id'] = I("department_id");
        }
        //社保缴纳地
        if (I("payLand")) {
            $map['e.payLand'] = I("payLand");
        }
        //户口性质
        if (I("householdType")) {
            $map['e.householdType'] = I("householdType");
        }
        //公积金基数
        if (I("foudBase")) {
            $map['e.foudBase'] = I("foudBase");
        }
        //社保基数
        if (I("payBase")) {
            $map['e.payBase'] = I("payBase");
        }
        $pages = I("pages");
        $basicInformation = D("BasicInformation");

        if(I("post.status") == '2'){
            $map['b.status'] = '2';
                $count =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                    ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                    ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                    ->field("a.id,a.name,a.unumber,a.department_id,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                    e.fundStarting,e.payAccount,f.name as payAccountName")->where($map)->count();
        }else{
            $map['b.status'] = array('neq','2');
                $count =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                    ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                    ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                    ->field("a.id,a.name,a.unumber,a.department_id,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                    e.fundStarting,e.payAccount,f.name as payAccountName")->where($map)->count();
        }

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        if(I("post.status") == '2'){
            $map['b.status'] = '2';
            $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,a.department_id,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,
                   e.socialStarting,e.foudBase,
                   e.fundStarting,e.payAccount,f.name as payAccountName")->where($map)->limit($offset, $pages)->select();
        }else{
            $map['b.status'] = array('neq','2');
            $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,a.department_id,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,
                   e.socialStarting,e.foudBase,
                   e.fundStarting,e.payAccount,f.name as payAccountName")->where($map)->limit($offset, $pages)->select();
        }
        //查出来的数据存储到员工社保档案临时表里
        $arr =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
            ->field("a.id,a.name,a.unumber,a.department_id,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,
                   e.socialStarting,e.foudBase,
                   e.fundStarting,e.payAccount,f.name as payAccountName")->select();
        $socialArchives = D("SocialArchives");
        $condition = $socialArchives->field("id,bid")->select();
        foreach($arr as $ka=>$va){
            $li[] = $va["id"];//38.47.58.171

        }
        $res = $socialArchives->field('id,bid')->where(array('bid' => array('IN', $li)))->select();//38.47.58
        var_dump($res);die;
//        echo $socialArchives->getLastsql();
        if($condition){
            foreach($res as $rk=>$rv){
                foreach($arr as $lk=>$lv){
                    if($rv["bid"] != $lv["id"]){
                        $data["bid"] = $lv["id"];
                        $data["name"] = $lv["name"];
                        $data["unumber"] = $lv["unumber"];
                        $data["department"] = $lv["department_name"];
                        $data["payLand"] = $lv["payLand"];
                        $data["householdType"] = $lv["householdType"];
                        $data["payBase"] = $lv["payBase"];
                        $data["socialStarTime"] = $lv["socialStarting"];
                        $data["fundBase"] = $lv["foudBase"];
                        $data["fundStarTime"] = $lv["fundStarting"];
                        $data["payAccount"] = $lv["payAccountName"];
                        $data["cardNum"] = $lv["cardNumber"];
                        $data["status"] = $lv["status"];
                        $datas = $socialArchives->create($data);
                        if($datas){
                            $socialArchives->add($datas);
                        }
                    }
                }
            }
        }else{
            foreach($arr as $ka=>$va){
                $data["bid"] = $va["id"];
                $data["name"] = $va["name"];
                $data["unumber"] = $va["unumber"];
                $data["department"] = $va["department_name"];
                $data["payLand"] = $va["payLand"];
                $data["householdType"] = $va["householdType"];
                $data["payBase"] = $va["payBase"];
                $data["socialStarTime"] = $va["socialStarting"];
                $data["fundBase"] = $va["foudBase"];
                $data["fundStarTime"] = $va["fundStarting"];
                $data["payAccount"] = $va["payAccountName"];
                $data["cardNum"] = $va["cardNumber"];
                $data["status"] = $va["status"];
                $datas = $socialArchives->create($data);
                if($datas){
                    $socialArchives->add($datas);
                }
            }

        }
        foreach ($list as &$val) {
            if($val['socialStarting'] == 0){
                $val['socialStarting']=null;
            }else{
                $val['socialStarting'] = date('Y-m', $val['socialStarting']);
            }
            if($val['fundStarting'] == 0){
                $val['fundStarting']=null;
            }else{
                $val['fundStarting'] = date('Y-m', $val['fundStarting']);
            }
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.3点击状态显示员工社保档案列表
    public function clickStatusSocialFiles(){
        //接收状态
        $status = I("post.status");
        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        if($status=='2'){
            $count =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                e.fundStarting,e.payAccount,f.name as payAccountName")->where("b.status='2'")->count();
        }else{
            $count =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                e.fundStarting,e.payAccount,f.name as payAccountName")->where("b.status !='2'")->count();
        }
        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        if($status=='2'){

            $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                e.fundStarting,f.name as payAccount")->where("b.status='2'")->limit($offset, $pages)->select();
        }else{
            $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
                ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
                ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
                ->field("a.id,a.name,a.unumber,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                e.fundStarting,e.payAccount,f.name as payAccountName")->where("b.status !='2'")->limit($offset, $pages)->select();
        }
        foreach ($list as &$val) {
            if($val['socialStarting'] == 0){
                $val['socialStarting']=null;
            }else{
                $val['socialStarting'] = date('Y-m', $val['socialStarting']);
            }
            if($val['fundStarting'] == 0){
                $val['fundStarting']=null;
            }else{
                $val['fundStarting'] = date('Y-m', $val['fundStarting']);
            }
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );

        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //4.3点击查看员工社保档案列表
    public function checkSocialFiles(){
        $id = I("post.id");
        $basicInformation = D("BasicInformation");
        $result =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_personnel_information as c on c.bid=a.id")->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")->join("oa_payaccount as f on f.id=e.payAccount")
            ->field("a.id,a.name,a.unumber,b.status,c.cardNumber,d.department_name,e.payLand,e.householdType,e.payBase,e.socialStarting,e.foudBase,
                e.fundStarting,e.payAccount,f.name as payAccountName")->where("a.id=".$id)->find();
        $result['fundStarting'] = date('Y-m-d', $result['fundStarting']);
        $result['socialStarting'] = date('Y-m-d', $result['socialStarting']);
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.3修改员工社保档案列表
    public function updateSocialFiles(){
        $id = I("post.id");
        $socialSecurityInformation = D("SocialSecurityInformation");
        $data["payLand"] = I("post.payLand");
        $data["householdType"] = I("post.householdType");
        $data["payAccount"] = I("post.payAccount");
        $data["payBase"] = I("post.payBase");
        $data["foudBase"] = I("post.foudBase");
        $data["socialStarting"] = strtotime(I("post.socialStarting"));
        $data["fundStarting"] = strtotime(I("post.fundStarting"));

        $socialSecurityPlan = D("SocialSecurityPlan");
        $list = $socialSecurityPlan->field("id,city,householdType,medicalBase,medicalRatio,pensionBase,pensionRatio,hurtedBase,
                    hurtedRatio,unemploymentBase,unemploymentRatio,birthedBase,birthedRatio,medicalRatioTwo,pensionRatioTwo,
                    hurtedRatioTwo,unemploymentRatioTwo,birthedRatioTwo,foudBase,foudRatio,foudRatioTwo,largeMedicalBase,largeMedicalRatio,
                    largeMedicalRatioTwo,effectiveDate,expiryDate,is_use,highestfoud,pensionHighestBase,hurtedHighestBase,unemploymentHighestBase,
                    birthedHighestBase,medicalHighestBase,largeMedicalHighestBase,medicalFixedFee,medicalFixedFeeTwo,pensionFixedFee,pensionFixedFeeTwo,
                    hurtedFixedFee,hurtedFixedFeeTwo,unemploymentFixedFee,unemploymentFixedFeeTwo,birthedFixedFee,birthedFixedFeeTwo,foudBaseFixedFee,
                    foudBaseFixedFeeTwo,largeMedicalFixedFee,largeMedicalFixedFeeTwo")
            ->where("city='{$data['payLand']}' and householdType='{$data['householdType']}' and expiryDate is null") ->find();

        //医疗基数和社保基数对比，谁大用谁
        if($list["medicalBase"] > $data['payBase']){
            //用大的值乘以比例数
            $data["medical"] = round(($list["medicalBase"] * $list["medicalRatio"] + $list["medicalBase"] * $list["largeMedicalRatio"])/100 + $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
            $data["medicalTwo"] = round(($list["medicalBase"] * $list["medicalRatioTwo"] + $list["medicalBase"] * $list["largeMedicalRatioTwo"])/100 + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
            $data["is_use"] = "1";
        }else{
            if($data['payBase']<$list["medicalHighestBase"]){
                $data["medical"] = round(($data['payBase'] * $list["medicalRatio"] + $data['payBase'] * $list["largeMedicalRatio"])/100 + $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                $data["medicalTwo"] = round(($data['payBase'] * $list["medicalRatioTwo"] + $data['payBase'] * $list["largeMedicalRatioTwo"])/100 + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                $data["is_use"] = "1";
            }

        }
        //养老基数
        if($list["pensionBase"] > $data['payBase']){
            $data["pension"] = round($list["pensionBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
            $data["pensionTwo"] = round($list["pensionBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
        }else{
            if($data["payBase"]<$list["pensionHighestBase"]){
                $data["pension"] = round($data["payBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                $data["pensionTwo"] = round($data["payBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
            }

        }
        //失业基数
        if($list["unemploymentBase"] > $data["payBase"]){
            $data["unemployment"] = round($list["unemploymentBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
            $data["unemploymentTwo"] = round($list["unemploymentBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
        }else{
            if($data["payBase"]<$list["unemploymentHighestBase"]){
                $data["unemployment"] = round($data["payBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                $data["unemploymentTwo"] = round($data["payBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
            }

        }
        //公积金基数
        if($list["foudBase"] > $data["foudBase"]){
            $data["fund"] = round($list["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
            $data["fundTwo"] = round($list["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
        }else{
            if($data["foudBase"]<$list["highestfoud"]){
                $data["fund"] = round($data["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                $data["fundTwo"] = round($data["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
            }

        }
        //工伤
        if($list["hurtedBase"] > $data["payBase"]){
            $data["hurted"] = round($list["hurtedBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
            $data["hurtedTwo"] = round($list["hurtedBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
        }else{
            if($data["payBase"]<$list["hurtedHighestBase"]){
                $data["hurted"] = round($data["payBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                $data["hurtedTwo"] = round($data["payBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
            }

        }
        //生育
        if($list["birthedBase"] > $data["payBase"]){
            $data["birthed"] = round($list["birthedBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
            $data["birthedTwo"] = round($list["birthedBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
        }else{
            if($data["payBase"]<$list["birthedHighestBase"]){
                $data["birthed"] = round($data["payBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                $data["birthedTwo"] = round($data["payBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
            }

        }
        $datas = $socialSecurityInformation->create($data);
        if($datas){
            $result = $socialSecurityInformation->where("bid=".$id)->save($datas);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }


    //4.4社保台账查看
    public function socialParameter(){
        //工号
        if (I("unumber")) {
            $map['a.unumber'] = array('like', '%' . I('unumber') . '%');
        }
        //姓名
        if (I("name")) {
            $map['a.name'] = array('like', '%' . I('name') . '%');
        }
        //部门
        if (I("department_id")) {
            $map['department_id'] = I("department_id");
        }
        //社保缴纳地
        if (I("payLand")) {
            $map['c.payLand'] = I("payLand");
        }
        //户口类型
        if (I("householdType")) {
            $map['c.householdType'] = I("householdType");
        }

        //台账月份
        if(I("parameterTime")){
            $map['c.create_time'] = strtotime(I("parameterTime"));
        }

        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")
            ->field("a.id,a.name,a.unumber,a.department_id,b.department_name as department,c.householdType,c.payLand,c.householdType,
            c.useMedical,c.usePension,c.useUnemployment,c.useFund,c.useHurted,c.useBirthed,c.create_time")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        //sumXXX的是每一项个人和公司一起交了多少钱
        $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")->join("oa_social_security_plan as d on d.id=c.usePlanId")
            ->field("a.id,a.name,a.unumber,a.department_id,b.department_name as department,c.householdType,c.payLand,c.householdType,
            c.useMedical,c.usePension,c.useUnemployment,c.useFund,c.useHurted,c.useBirthed,c.medical,c.pension,c.unemployment,
            c.fund,c.medicalTwo,c.pensionTwo,c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,(c.medical+c.medicalTwo) as sumMed,
            (c.pension+c.pensionTwo) as sumPen,(c.unemployment+c.unemploymentTwo) as sumUne,(c.fund+c.fundTwo) as sumFun,
            (c.medical+c.pension+c.unemployment) as sumSelfSocial,c.payAccount,c.create_time,
            (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as sumCompanySocial,
            (c.medical+c.pension+c.unemployment+c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as sumSelfAndCompany,
            d.medicalRatio,d.pensionRatio,d.hurtedRatio,d.unemploymentRatio,d.birthedRatio,d.foudRatio,d.medicalRatioTwo,d.pensionRatioTwo,
            d.hurtedRatioTwo,d.unemploymentRatioTwo,d.birthedRatioTwo,d.foudRatioTwo,d.largeMedicalRatio,d.largeMedicalRatioTwo,d.medicalFixedFee,
            (d.medicalRatioTwo+d.largeMedicalRatioTwo) as sumCompanyMedicalRatio")
            ->where($map)->limit($offset, $pages)->select();

        //遍历得到使用的基金和社保以及计算后的基金和社保
        foreach($list as $key=>$value){
            $arr[$key]["medicalRatio"] = $value["medicalRatio"];
            $arr[$key]["pensionRatio"] = $value["pensionRatio"];
            $arr[$key]["hurtedRatio"] = $value["hurtedRatio"];
            $arr[$key]["unemploymentRatio"] = $value["unemploymentRatio"];
            $arr[$key]["birthedRatio"] = $value["birthedRatio"];
            $arr[$key]["foudRatio"] = $value["foudRatio"];
            $arr[$key]["medicalRatioTwo"] = $value["medicalRatioTwo"];
            $arr[$key]["pensionRatioTwo"] = $value["pensionRatioTwo"];
            $arr[$key]["hurtedRatioTwo"] = $value["hurtedRatioTwo"];
            $arr[$key]["unemploymentRatioTwo"] = $value["unemploymentRatioTwo"];
            $arr[$key]["birthedRatioTwo"] = $value["birthedRatioTwo"];
            $arr[$key]["foudRatioTwo"] = $value["foudRatioTwo"];
            $arr[$key]["largeMedicalRatio"] = $value["largeMedicalRatio"];
            $arr[$key]["largeMedicalRatioTwo"] = $value["largeMedicalRatioTwo"];
            $arr[$key]["medicalFixedFee"] = $value["medicalFixedFee"];
            $arr[$key]["sumCompanyMedicalRatio"] = $value["sumCompanyMedicalRatio"];

            //使用的医疗基数
            $arr[$key]["useMedical"] = intval($value["useMedical"]);
            //使用的养老基数
            $arr[$key]["usePension"] = intval($value["usePension"]);
            //使用的失业基数
            $arr[$key]["useUnemployment"] = intval($value["useUnemployment"]);
            //使用的公积金基数
            $arr[$key]["useFund"] = intval($value["useFund"]);
            //使用的工伤基数
            $arr[$key]["useHurted"] = intval($value["useHurted"]) ;
            //使用的生育基数
            $arr[$key]["useBirthed"] = intval($value["useBirthed"]);
            //计算的医疗个人
            $arr[$key]["medical"] = intval($value["medical"]);
            //计算的医疗公司
            $arr[$key]["medicalTwo"] = intval($value["medicalTwo"]);
            //计算的养老个人
            $arr[$key]["pension"] = intval($value["pension"]);
            //计算的养老公司
            $arr[$key]["pensionTwo"] = intval($value["pensionTwo"]);
            //计算的失业个人
            $arr[$key]["unemployment"] = intval($value["unemployment"]);
            //计算的失业公司
            $arr[$key]["unemploymentTwo"] = intval($value["unemploymentTwo"]);
            //计算的工伤公司
            $arr[$key]["hurted"] = intval($value["hurted"]);
            //计算的生育公司
            $arr[$key]["birthed"] = intval($value["birthed"]);
            //计算的公积金个人
            $arr[$key]["fund"] = intval($value["fund"]);
            //计算的公积金公司
            $arr[$key]["fundTwo"] = intval($value["fundTwo"]);

            //社保个人
            $arr[$key]["sumSelfSocial"] = intval($value["sumSelfSocial"]);
            //社保公司
            $arr[$key]["sumCompanySocial"] = intval($value["sumCompanySocial"]);
            $arr[$key]["sumSelfAndCompany"] = intval($value["sumSelfAndCompany"]);

            //个人社保和公积金
            $arr[$key]["sumSelfSocialAndFund"] = $arr[$key]["sumSelfSocial"]+$arr[$key]["fund"];
            //公司社保和公积金
            $arr[$key]["sumCompanySocialAndFund"] = $arr[$key]["sumCompanySocial"]+$arr[$key]["fundTwo"];
        }


        $item=array();
        foreach($arr as $k=>$v){
            //计算使用的基数的竖列的和
            $item['countUseMedical']+=$v['useMedical'];
            $item['countUsePension']+=$v['usePension'];
            $item['countUseUnemployment']+=$v['useUnemployment'];
            $item['countUseFund']+=$v['useFund'];
            $item['countUseHurted']+=$v['useHurted'];
            $item['countUseBirthed']+=$v['useBirthed'];
            //计算最终缴费的每列的和
            $item['countMedical']+=$v['medical'];
            $item['countMedicalTwo']+=$v['medicalTwo'];
            $item['countPension']+=$v['pension'];
            $item['countPensionTwo']+=$v['pensionTwo'];
            $item['countUnemployment']+=$v['unemployment'];
            $item['countUnemploymentTwo']+=$v['unemploymentTwo'];
            $item['countHurted']+=$v['hurted'];
            $item['countBirthed']+=$v['birthed'];
            $item['countFund']+=$v['fund'];
            $item['countFundTwo']+=$v['fundTwo'];

            //返回所有人社保个人之和以及所有人社保公司之和以及个人社保和公司社保的和
            $item['allPeopleSelfSocialSum']+=$v['sumSelfSocial'];
            $item['allPeopleCompanySocialSum']+=$v['sumCompanySocial'];
            $item['allPeopleSelfAndCompanySocialSum']+=$v['sumSelfAndCompany'];

            //得到每个人和公司的社保合计和公积金合计以及每个人和公司的社保和公积金的合计
            $item['sumSelfSocialAndFund'] = $v["sumSelfSocialAndFund"];
            $item['sumCompanySocialAndFund'] = $v["sumCompanySocialAndFund"];
            $item['allPeopleSocialAndFund'] = $item['sumSelfSocialAndFund']+$item['sumCompanySocialAndFund'];

        }
        //分别计算个人社保和公司社保的每一项和的和
//        $sumMoney=array();
        //医疗和
        $item["countMedicalAndMedicalTwo"] = $item['countMedical']+$item['countMedicalTwo'];
        //养老
        $item["countPensionAndPensionTwo"] = $item['countPension']+$item['countPensionTwo'];
        //失业
        $item["countUnemploymentAndUnemploymentTwo"] = $item['countUnemployment']+$item['countUnemploymentTwo'];
        //公积金
        $item["countFundAndFundTwo"] = $item['countFund']+$item['countFundTwo'];

        //个人社保和公积金合计
        $item["countSelfSocialAndFund"] = $item['sumSelfSocial']+$item['countFund'];
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list,
            'item'=>$item
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.4增加社保台账
    public function addSocialParameter(){
        $data["parameterTime"] = I("post.parameterTime");
        $data["type"] = I("post.type");
//        if($data["type"] == "3"){
//            if($_FILES == ""){
//                self::jsons($error=($error="1"),$result="文件不存在");
//            }
//        }
        $socialParameter = D("SocialParameter");
        $datas = $socialParameter->create($data);
        if($datas){
            $result = $socialParameter->add($datas);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.4社保台账列表
    public function socialParameterList(){
        //户口类型
        if (I("parameterTime")) {
            $map['parameterTime'] = I("parameterTime");
        }

        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->field("id,parameterTime,type")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list = $basicInformation->field("id,parameterTime,type")->where($map)->limit($offset, $pages)->select();
        foreach ($list as &$val) {
            $val['parameterTime'] = date('Y-m', $val['parameterTime']);
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.4添加员工
//    public function addEmployees(){
//
//    }

    //4.6部门社保统计
    public function socialDepartmentStatistic(){

        $starTime = strtotime(I("starTime"));

        $endTime = strtotime(I("endTime"));

        if ($starTime != '' && $endTime != '') {
            $map['c.create_time'] = array('between', "$starTime,$endTime");
        }
        $department_id = I("post.department_id");
        $map["a.department_id"] = $department_id;
        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->table("oa_basic_information as a")
            ->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")
            ->join("oa_personnel_information as d on d.bid=a.id")
            ->field("a.id,a.department_id,b.department_name,c.medical,c.pension,c.unemployment,c.fund,c.medicalTwo,c.pensionTwo,
            c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,c.create_time,d.status")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$basicInformation->table("oa_basic_information as a")
            ->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")
            ->join("oa_personnel_information as d on d.bid=a.id")
            ->field("a.id,a.department_id,b.department_name,c.medical,c.pension,c.unemployment,c.fund,c.medicalTwo,c.pensionTwo,
            c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,c.create_time,d.status")->where($map)->limit($offset, $pages)->select();
        //每个部门的每一项的合（eg：IT部门的所有人的社保和，公积金和）
        $item = array();
        foreach($list as $k=>$v){
            if(!isset($item[$v['department_id']])){
                $item[$v['department_id']]=$v;
            }else{
                $item[$v['department_id']]['medical']+=$v['medical'];
                $item[$v['department_id']]['pension']+=$v['pension'];
                $item[$v['department_id']]['unemployment']+=$v['unemployment'];
                $item[$v['department_id']]['fund']+=$v['fund'];
                $item[$v['department_id']]['medicalTwo']+=$v['medicalTwo'];
                $item[$v['department_id']]['pensionTwo']+=$v['pensionTwo'];
                $item[$v['department_id']]['unemploymentTwo']+=$v['unemploymentTwo'];
                $item[$v['department_id']]['hurted']+=$v['hurted'];
                $item[$v['department_id']]['birthed']+=$v['birthed'];
                $item[$v['department_id']]['fundTwo']+=$v['fundTwo'];
            }
        }
        $arr = array();
        foreach ($item as $key=>$value){
            //每个部门社保自己交的
            $arr[$value["department_id"]]['selfSocial'] = $value["medical"]+$value["pension"] +$value["unemployment"];
            //每个部门社保公司交的
            $arr[$value["department_id"]]['departmentSocial'] = $value["medicalTwo"]+$value["pensionTwo"]
                +$value["unemploymentTwo"]+$value["birthed"]+$value["hurted"];
            //每个部门社保公司和个人交的总和
            $arr[$value["department_id"]]['departmentSocialCount'] = $arr[$value["department_id"]]['selfSocial']
                +$arr[$value["department_id"]]['departmentSocial'];

            //公司和个人交的公积金总和
            $arr[$value["department_id"]]['departmentFundCount'] = $value["fund"]+$value["fundTwo"];

            //员工自己交的社保和公积金总和
            $arr[$value["department_id"]]['selfSocialAndFundCount'] = $arr[$value["department_id"]]['selfSocial']+$value["fund"];
            //公司交的社保和公积金总和
            $arr[$value["department_id"]]['departmentSocialAndFundCount'] = $arr[$value["department_id"]]['departmentSocial']+$value["fundTwo"];
            //部门所有人公司和员工一起交的社保和公积金总和
            $arr[$value["department_id"]]['allCount'] = $arr[$value["department_id"]]['selfSocialAndFundCount']+$arr[$value["department_id"]]['departmentSocialAndFundCount'];

        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'item' => $item,
            'arr' => $arr,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //4.6点击查看一个部门所有人员的社保和公积金情况
    public function clickSocialDepartmentStatistic(){
        $department_id = I("post.department_id");

        $starTime = strtotime(I("starTime"));

        $endTime = strtotime(I("endTime"));

        if ($starTime != '' && $endTime != '') {
            $map['c.create_time'] = array('between', "$starTime,$endTime");
        }
        $map['a.department_id'] = $department_id;
        $map['d.status']!='2';
        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->table("oa_basic_information as a")
            ->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")
            ->join("oa_personnel_information as d on d.bid=a.id")
            ->field("a.id,a.name,a.department_id,b.department_name,c.medical,c.pension,c.unemployment,c.fund,c.medicalTwo,c.pensionTwo,
                c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,c.create_time,c.householdType,c.householdType,c.payAccount,c.payBase,
                d.status,(c.medical+c.pension+c.unemployment) as selfSocialCount,
                (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as companySocialCount,
                (c.fund+c.fundTwo) as fundCount,(c.medical+c.pension+c.unemployment+c.fund) as selfSocialAndFundCount,
                (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed+c.fundTwo) as companySocialAndFundCount")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$basicInformation->table("oa_basic_information as a")
            ->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")
            ->join("oa_personnel_information as d on d.bid=a.id")
            ->field("a.id,a.name,a.department_id,b.department_name,c.medical,c.pension,c.unemployment,c.fund,c.medicalTwo,c.pensionTwo,
                c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,c.create_time,c.householdType,c.householdType,c.payAccount,c.payBase,
                d.status,(c.medical+c.pension+c.unemployment) as selfSocialCount,
                (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as companySocialCount,
                (c.fund+c.fundTwo) as fundCount,(c.medical+c.pension+c.unemployment+c.fund) as selfSocialAndFundCount,
                (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed+c.fundTwo) as companySocialAndFundCount")->where($map)->limit($offset, $pages)->select();
        //计算社保总和以及公积金社保总和
        $item = array();
        foreach($list as $k=>$v){
            if(!isset($item[$v['id']])){
                $item[$v['id']]=$v;
            }else{
                //社保总和
                $item[$v['id']]['socialCount']=$v['selfSocialCount']+$v['companySocialCount'];

                //社保和公积金总和
                $item[$v['id']]['socialAndFundCount']=$v['selfSocialAndFundCount']+$v['companySocialAndFundCount'];
            }
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'item' => $item,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //4.7公司社保统计
    public function companySocialStatistical(){
        $starTime = strtotime(I("starTime"));

        $endTime = strtotime(I("endTime"));

        if ($starTime != '' && $endTime != '') {
            $map['e.create_time'] = array('between', "$starTime,$endTime");
        }
        $pages = I("pages");
        $company = D("Company");
        $count = $company->table("oa_company as a")
            ->join("oa_contract as b on b.company_id=a.id")
            ->join("oa_personnel_information as c on c.contract_id=b.id")
            ->join("oa_basic_information as d on d.id=c.bid")
            ->join("oa_social_security_information as e on e.bid=d.id")
            ->field("a.id,a.name,b.company_id,c.contract_id,c.status,e.medical,e.pension,e.unemployment,e.fund,e.medicalTwo,
            e.pensionTwo,e.unemploymentTwo,e.hurted,e.birthed,e.fundTwo,e.create_time")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$company->table("oa_company as a")
            ->join("oa_contract as b on b.company_id=a.id")
            ->join("oa_personnel_information as c on c.contract_id=b.id")
            ->join("oa_basic_information as d on d.id=c.bid")
            ->join("oa_social_security_information as e on e.bid=d.id")
            ->field("a.id,a.name,b.company_id,c.contract_id,c.status,e.medical,e.pension,e.unemployment,e.fund,e.medicalTwo,
            e.pensionTwo,e.unemploymentTwo,e.hurted,e.birthed,e.fundTwo,e.create_time")
            ->where($map)->limit($offset, $pages)->select();
//        var_dump($list);
//        echo $company->getLastsql();die;
        //分别计算每个公司下的所有人的每一项保险和公积金的和（eg：梵几的所有人的社保和以及公积金和）
        $item = array();
        foreach($list as $k=>$v){
            if(!isset($item[$v['company_id']])){
                $item[$v['company_id']]=$v;
            }else{
                $item[$v['company_id']]['medical']+=$v['medical'];
                $item[$v['company_id']]['pension']+=$v['pension'];
                $item[$v['company_id']]['unemployment']+=$v['unemployment'];
                $item[$v['company_id']]['fund']+=$v['fund'];
                $item[$v['company_id']]['medicalTwo']+=$v['medicalTwo'];
                $item[$v['company_id']]['pensionTwo']+=$v['pensionTwo'];
                $item[$v['company_id']]['unemploymentTwo']+=$v['unemploymentTwo'];
                $item[$v['company_id']]['hurted']+=$v['hurted'];
                $item[$v['company_id']]['birthed']+=$v['birthed'];
                $item[$v['company_id']]['fundTwo']+=$v['fundTwo'];
            }
        }
//        var_dump($item);die;
        $arr = array();
        foreach ($item as $key=>$value){
            //公司社保自己交的
            $arr[$value["company_id"]]['selfSocial'] = $value["medical"]+$value["pension"] +$value["unemployment"];
            //公司社保社保公司交的
            $arr[$value["company_id"]]['departmentSocial'] = $value["medicalTwo"]+$value["pensionTwo"]
                +$value["unemploymentTwo"]+$value["birthed"]+$value["hurted"];
            //每个公司社保公司和个人交的总和
            $arr[$value["company_id"]]['departmentSocialCount'] = $arr[$value["company_id"]]['selfSocial']
                +$arr[$value["company_id"]]['departmentSocial'];

            //公司和个人交的公积金总和
            $arr[$value["company_id"]]['departmentFundCount'] = $value["fund"]+$value["fundTwo"];

            //员工自己交的社保和公积金总和
            $arr[$value["company_id"]]['selfSocialAndFundCount'] = $arr[$value["company_id"]]['selfSocial']+$value["fund"];
            //公司交的社保和公积金总和
            $arr[$value["company_id"]]['departmentSocialAndFundCount'] = $arr[$value["company_id"]]['departmentSocial']+$value["fundTwo"];
            //公司所有人公司和员工一起交的社保和公积金总和
            $arr[$value["company_id"]]['allCount'] = $arr[$value["company_id"]]['selfSocialAndFundCount']+$arr[$value["company_id"]]['departmentSocialAndFundCount'];

        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'item' => $item,
            'arr' => $arr,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //4.7公司社保统计明细查询
    public function clickCompanySocialStatistical(){
        $company_id = I("post.company_id");
        $starTime = strtotime(I("starTime"));

        $endTime = strtotime(I("endTime"));

        if ($starTime != '' && $endTime != '') {
            $map['c.create_time'] = array('between', "$starTime,$endTime");
        }
        $map['b.company_id'] = $company_id;
        $pages = I("pages");
        $company = D("Company");
        $count = $company->table("oa_company as a")
            ->join("oa_contract as b on b.company_id=a.id")
            ->join("oa_personnel_information as c on c.contract_id=b.id")
            ->join("oa_basic_information as d on d.id=c.bid")
            ->join("oa_social_security_information as e on e.bid=d.id")
            ->join("oa_organizational_structure as f on f.id=d.department_id")
            ->field("a.name as companyName,d.id as basicId,d.name,d.department_id,f.department_name,b.company_id,c.contract_id,c.status,e.medical,
                e.pension,e.unemployment,e.fund,e.medicalTwo,e.householdType,e.payLand,e.payAccount,e.payBase,e.pensionTwo,
                e.unemploymentTwo,e.hurted,e.birthed,e.fundTwo,e.create_time,(e.medical+e.pension+e.unemployment) as selfSocialCount,
                (e.medicalTwo+e.pensionTwo+e.unemploymentTwo+e.hurted+e.birthed) as companySocialCount,
                (e.medical+e.pension+e.unemployment+e.medicalTwo+e.pensionTwo+e.unemploymentTwo+e.hurted+e.birthed) as selfAndCompanySocialCount,
                (e.fund+e.fundTwo) as selfAndCompanyFundCount")
            ->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$company->table("oa_company as a")
            ->join("oa_contract as b on b.company_id=a.id")
            ->join("oa_personnel_information as c on c.contract_id=b.id")
            ->join("oa_basic_information as d on d.id=c.bid")
            ->join("oa_social_security_information as e on e.bid=d.id")
            ->join("oa_organizational_structure as f on f.id=d.department_id")
            ->field("a.name as companyName,d.id as basicId,d.name,d.department_id,f.department_name,b.company_id,c.contract_id,c.status,e.medical,
                e.pension,e.unemployment,e.fund,e.medicalTwo,e.householdType,e.payLand,e.payAccount,e.payBase,e.pensionTwo,
                e.unemploymentTwo,e.hurted,e.birthed,e.fundTwo,e.create_time,(e.medical+e.pension+e.unemployment) as selfSocialCount,
                (e.medicalTwo+e.pensionTwo+e.unemploymentTwo+e.hurted+e.birthed) as companySocialCount,
                (e.medical+e.pension+e.unemployment+e.medicalTwo+e.pensionTwo+e.unemploymentTwo+e.hurted+e.birthed) as selfAndCompanySocialCount,
                (e.fund+e.fundTwo) as selfAndCompanyFundCount")
            ->where($map)->limit($offset, $pages)->select();

        //计算这个公司下的其中一个员工的社保和公积金总和
        $item = array();
        foreach($list as $k=>$v){
            if(!isset($item[$v['basicId']])){
                $item[$v['basicId']]=$v;
            }else{
                //社保和公积金总和
                $item[$v['basicId']]['socialAndFundCount']=$v['selfAndCompanySocialCount']+$v['selfAndCompanyFundCount'];
            }
        }
        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'item' => $item,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }

    //4.5社保补缴
    public function socialPayment(){
        //工号
        if (I("unumber")) {
            $map['a.unumber'] = array('like', '%' . I('unumber') . '%');
        }
        //姓名
        if (I("name")) {
            $map['a.name'] = array('like', '%' . I('name') . '%');
        }

        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")
            ->join("oa_payaccount as f on f.id=e.payAccount")
            ->field("a.id,a.name,a.unumber,a.department_id,d.department_name,e.payLand,e.householdType,
                e.payBase,e.foudBase,e.payAccount,f.name as payAccountName")->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")
            ->join("oa_payaccount as f on f.id=e.payAccount")
            ->field("a.id,a.name,a.unumber,a.department_id,d.department_name,e.payLand,e.householdType,
                e.payBase,e.foudBase,e.payAccount,f.name as payAccountName")->where($map)->limit($offset, $pages)->select();

        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);

    }
    //4.5增加社保补缴信息
    public function addSocialPayment(){
        //得到被补缴社保人的id
        $id = I("post.id");
        $data["medical_type"] = I("post.medical_type");
        $data["pension_type"] = I("post.pension_type");
        $data["unemployment_type"] = I("post.unemployment_type");
        $data["hurted_type"] = I("post.hurted_type");
        $data["birthed_type"] = I("post.birthed_type");
        $data["fund_type"] = I("post.fund_type");
        $data["large_medical_type"] = I("post.large_medical_type");
        $data["start_time"] = strtotime(I("post.start_time"));
        $data["end_time"] = strtotime(I("post.end_time"));
        $socialSecurityInformation = D("SocialSecurityInformation");
        $condition = $socialSecurityInformation->field("id,bid,householdType,payLand,payBase,foudBase,payAccount")
            ->where("bid=".$id)->find();
        $payBase = $condition["payBase"];
        $foudBase = $condition["foudBase"];
        //给谁补缴社保，提供这个人的社保缴纳地和户口类型，来匹配相应的方案
        $payLand = I("post.payLand");
        $householdType = I("post.householdType");
        $socialSecurityPlan = D("SocialSecurityPlan");
        $list = $socialSecurityPlan->field("id,city,householdType,medicalBase,medicalRatio,pensionBase,pensionRatio,hurtedBase,
                    hurtedRatio,unemploymentBase,unemploymentRatio,birthedBase,birthedRatio,medicalRatioTwo,pensionRatioTwo,
                    hurtedRatioTwo,unemploymentRatioTwo,birthedRatioTwo,foudBase,foudRatio,foudRatioTwo,largeMedicalBase,largeMedicalRatio,
                    largeMedicalRatioTwo,effectiveDate,expiryDate,is_use,highestfoud,pensionHighestBase,hurtedHighestBase,unemploymentHighestBase,
                    birthedHighestBase,medicalHighestBase,largeMedicalHighestBase,medicalFixedFee,medicalFixedFeeTwo,pensionFixedFee,pensionFixedFeeTwo,
                    hurtedFixedFee,hurtedFixedFeeTwo,unemploymentFixedFee,unemploymentFixedFeeTwo,birthedFixedFee,birthedFixedFeeTwo,foudBaseFixedFee,
                    foudBaseFixedFeeTwo,largeMedicalFixedFee,largeMedicalFixedFeeTwo")
            ->where("city='{$payLand}' and householdType='{$householdType}' and expiryDate is null") ->find();

        $data["medicalFixedFee"] = $list["medicalFixedFee"];

        //医疗基数和社保基数对比，谁大用谁
        if($data["medical_type"] == "1"){
            if($list["medicalBase"] > $payBase){
                //用大的值乘以比例数
                $data["medical"] = round((($list["medicalBase"] * $list["medicalRatio"] + $list["medicalBase"] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                $data["medicalTwo"] = round((($list["medicalBase"] * $list["medicalRatioTwo"] + $list["medicalBase"] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                $data["is_use"] = "1";
                $item["medicalCount"] = $data["medical"];
            }else{
                if($payBase<$list["medicalHighestBase"]){
                    $data["medical"] = round((($data['payBase'] * $list["medicalRatio"] + $payBase * $list["largeMedicalRatio"])/100) + $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                    $data["medicalTwo"] = round((($data['payBase'] * $list["medicalRatioTwo"] + $payBase * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                    $data["is_use"] = "1";
                    $item["medicalCount"] = $data["medical"];
                }else{
                    $data["medical"] = round((($list['medicalHighestBase'] * $list["medicalRatio"] + $list['medicalHighestBase'] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                    $data["medicalTwo"] = round((($list['medicalHighestBase'] * $list["medicalRatioTwo"] + $list['medicalHighestBase'] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                    $data["is_use"] = "1";
                    $item["medicalCount"] = $data["medical"];
                }
            }
        }
        if($data["medical_type"] == "2"){
            if($list["medicalBase"] > $payBase){
                //用大的值乘以比例数
                $data["medical"] = round((($list["medicalBase"] * $list["medicalRatio"] + $list["medicalBase"] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                $data["medicalTwo"] = round((($list["medicalBase"] * $list["medicalRatioTwo"] + $list["medicalBase"] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                $data["is_use"] = "1";
                $item["medicalCount"] = $data["medicalTwo"];
            }else{
                if($payBase<$list["medicalHighestBase"]){
                    $data["medical"] = round((($data['payBase'] * $list["medicalRatio"] + $payBase * $list["largeMedicalRatio"])/100) + $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                    $data["medicalTwo"] = round((($data['payBase'] * $list["medicalRatioTwo"] + $payBase * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                    $data["is_use"] = "1";
                    $item["medicalCount"] = $data["medicalTwo"];
                }else{
                    $data["medical"] = round((($list['medicalHighestBase'] * $list["medicalRatio"] + $list['medicalHighestBase'] * $list["largeMedicalRatio"])/100 )+ $list["medicalFixedFee"]+$list["largeMedicalFixedFee"],2);//个人
                    $data["medicalTwo"] = round((($list['medicalHighestBase'] * $list["medicalRatioTwo"] + $list['medicalHighestBase'] * $list["largeMedicalRatioTwo"])/100) + $list["medicalFixedFeeTwo"]+$list["largeMedicalFixedFeeTwo"],2);//公司
                    $data["is_use"] = "1";
                    $item["medicalCount"] = $data["medicalTwo"];
                }

            }
        }

        //养老基数
        if($data["pension_type"]=="1"){
            if($list["pensionBase"] > $payBase){
                $data["pension"] = round(($list["pensionBase"] * $list["pensionRatio"]/100) + $list["pensionFixedFee"],2);
                $data["pensionTwo"] = round($list["pensionBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                $item["pensionCount"] = $data["pension"];
            }else{
                if($payBase<$list["pensionHighestBase"]){
                    $data["pension"] = round($payBase * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                    $data["pensionTwo"] = round($payBase * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                    $item["pensionCount"] = $data["pension"];
                }else{
                    $data["pension"] = round($list["pensionHighestBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                    $data["pensionTwo"] = round($list["pensionHighestBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                    $item["pensionCount"] = $data["pension"];
                }

            }
        }
        if($data["pension_type"]=="2"){
            if($list["pensionBase"] > $payBase){
                $data["pension"] = round(($list["pensionBase"] * $list["pensionRatio"]/100) + $list["pensionFixedFee"],2);
                $data["pensionTwo"] = round($list["pensionBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                $item["pensionCount"] = $data["pensionTwo"];
            }else{
                if($payBase<$list["pensionHighestBase"]){
                    $data["pension"] = round($payBase * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                    $data["pensionTwo"] = round($payBase * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                    $item["pensionCount"] = $data["pensionTwo"];
                }else{
                    $data["pension"] = round($list["pensionHighestBase"] * $list["pensionRatio"]/100 + $list["pensionFixedFee"],2);
                    $data["pensionTwo"] = round($list["pensionHighestBase"] * $list["pensionRatioTwo"]/100 + $list["pensionFixedFeeTwo"],2);
                    $item["pensionCount"] = $data["pensionTwo"];
                }

            }
        }

        //失业基数
        if($data["unemployment_type"]=="1"){

            if($list["unemploymentBase"] > $payBase){
                $data["unemployment"] = round($list["unemploymentBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                $data["unemploymentTwo"] = round($list["unemploymentBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                $item["unemploymentCount"] = $data["unemployment"];
            }else{
                if($payBase<$list["unemploymentHighestBase"]){
                    $data["unemployment"] = round($payBase * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                    $data["unemploymentTwo"] = round($payBase * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                    $item["unemploymentCount"] = $data["unemployment"];
                }else{
                    $data["unemployment"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                    $data["unemploymentTwo"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                    $item["unemploymentCount"] = $data["unemployment"];
                }

            }
        }
        if($data["unemployment_type"]=="2"){
            if($list["unemploymentBase"] > $payBase){
                $data["unemployment"] = round($list["unemploymentBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                $data["unemploymentTwo"] = round($list["unemploymentBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                $item["unemploymentCount"] = $data["unemploymentTwo"];
            }else{
                if($payBase<$list["unemploymentHighestBase"]){
                    $data["unemployment"] = round($payBase * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                    $data["unemploymentTwo"] = round($payBase * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                    $item["unemploymentCount"] = $data["unemploymentTwo"];
                }else{
                    $data["unemployment"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatio"]/100 + $list["unemploymentFixedFee"],2);
                    $data["unemploymentTwo"] = round($list["unemploymentHighestBase"] * $list["unemploymentRatioTwo"]/100 + $list["unemploymentFixedFeeTwo"],2);
                    $item["unemploymentCount"] = $data["unemploymentTwo"];
                }

            }
        }
        //公积金基数
        if($data["fund_type"]=="1"){

            if($list["foudBase"] > $foudBase){
                $data["fund"] = round($list["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                $data["fundTwo"] = round($list["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                $item["fundCount"] = $data["fund"];
            }else{
                if($payBase<$list["highestfoud"]){
                    $data["fund"] = round($foudBase * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                    $data["fundTwo"] = round($foudBase * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                    $item["fundCount"] = $data["fund"];
                }else{
                    $data["fund"] = round($list["highestfoud"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                    $data["fundTwo"] = round($list["highestfoud"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                    $item["fundCount"] = $data["fund"];
                }

            }
        }
        if($data["fund_type"]=="2"){
            if($list["foudBase"] > $foudBase){
                $data["fund"] = round($list["foudBase"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                $data["fundTwo"] = round($list["foudBase"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                $item["fundCount"] = $data["fundTwo"];
            }else{
                if($payBase<$list["highestfoud"]){
                    $data["fund"] = round($foudBase * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                    $data["fundTwo"] = round($foudBase * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                    $item["fundCount"] = $data["fundTwo"];
                }else{
                    $data["fund"] = round($list["highestfoud"] * $list["foudRatio"]/100 + $list["foudBaseFixedFee"],2);
                    $data["fundTwo"] = round($list["highestfoud"] * $list["foudRatioTwo"]/100 + $list["foudBaseFixedFeeTwo"],2);
                    $item["fundCount"] = $data["fundTwo"];
                }

            }
        }

        //工伤
        if($data["hurted_type"]=="1"){

            if($list["hurtedBase"] > $payBase){
                $data["hurted"] = round($list["hurtedBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                $data["hurtedTwo"] = round($list["hurtedBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                $item["hurtedCount"] = $data["hurted"];
            }else{
                if($payBase<$list["hurtedHighestBase"]){
                    $data["hurted"] = round($payBase * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                    $data["hurtedTwo"] = round($payBase * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                    $item["hurtedCount"] = $data["hurted"];
                }else{
                    $data["hurted"] = round($list["hurtedHighestBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                    $data["hurtedTwo"] = round($list["hurtedHighestBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                    $item["hurtedCount"] = $data["hurted"];
                }

            }
        }
        if($data["hurted_type"]=="2"){
            if($list["hurtedBase"] > $payBase){
                $data["hurted"] = round($list["hurtedBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                $data["hurtedTwo"] = round($list["hurtedBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                $item["hurtedCount"] = $data["hurtedTwo"];
            }else{
                if($payBase<$list["hurtedHighestBase"]){
                    $data["hurted"] = round($payBase * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                    $data["hurtedTwo"] = round($payBase * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                    $item["hurtedCount"] = $data["hurtedTwo"];
                }else{
                    $data["hurted"] = round($list["hurtedHighestBase"] * $list["hurtedRatio"]/100 + $list["hurtedFixedFee"],2);
                    $data["hurtedTwo"] = round($list["hurtedHighestBase"] * $list["hurtedRatioTwo"]/100 + $list["hurtedFixedFeeTwo"],2);
                    $item["hurtedCount"] = $data["hurtedTwo"];
                }

            }
        }

        //生育
        if($data["birthed_type"]=="1"){

            if($list["birthedBase"] > $payBase){
                $data["birthed"] = round($list["birthedBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                $data["birthedTwo"] = round($list["birthedBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                $item["birthedCount"] = $data["birthed"];
            }else{
                if($payBase<$list["birthedHighestBase"]){
                    $data["birthed"] = round($payBase * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                    $data["birthedTwo"] = round($payBase * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                    $item["birthedCount"] = $data["birthed"];
                }else{
                    $data["birthed"] = round($list["birthedHighestBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                    $data["birthedTwo"] = round($list["birthedHighestBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                    $item["birthedCount"] = $data["birthed"];
                }

            }
        }
        if($data["birthed_type"]=="2"){
            if($list["birthedBase"] > $payBase){
                $data["birthed"] = round($list["birthedBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                $data["birthedTwo"] = round($list["birthedBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                $item["birthedCount"] = $data["birthedTwo"];
            }else{
                if($payBase<$list["birthedHighestBase"]){
                    $data["birthed"] = round($payBase * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                    $data["birthedTwo"] = round($payBase * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                    $item["birthedCount"] = $data["birthedTwo"];
                }else{
                    $data["birthed"] = round($list["birthedHighestBase"] * $list["birthedRatio"]/100 + $list["birthedFixedFee"],2);
                    $data["birthedTwo"] = round($list["birthedHighestBase"] * $list["birthedRatioTwo"]/100 + $list["birthedFixedFeeTwo"],2);
                    $item["birthedCount"] = $data["birthedTwo"];
                }

            }
        }


        $socialPayment = D("SocialPayment");
        $datas = $socialPayment->create($data);
        if($datas){
            $result = $socialPayment->add($datas);
            $arr["spid"] = $result;
            $arrs = $socialSecurityInformation->create($arr);
            $socialSecurityInformation->where("bid=".$id)->save($arrs);
        }
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }
    //4.5社保补缴统计
    public function socialPaymentStatistical(){

        //时间
        $starTime = strtotime(I("times"));

        if ($starTime != '') {
            $map[$starTime] = array('between', "f.start_time,f.end_time");
        }


        //工号
        if (I("unumber")) {
            $map['a.unumber'] = array('like', '%' . I('unumber') . '%');
        }
        //姓名
        if (I("name")) {
            $map['a.name'] = array('like', '%' . I('name') . '%');
        }

        //部门
        if (I("department_id")) {
            $map['a.department_id'] = I("department_id");
        }
        //社保缴纳地
        if (I("payLand")) {
            $map['e.payLand'] = I("payLand");
        }
        //户口性质
        if (I("householdType")) {
            $map['e.householdType'] = I("householdType");
        }

        //补缴形式
        if (I("payment_type")) {
            $map['f.payment_type'] = I("payment_type");
        }
        $pages = I("pages");
        $basicInformation = D("BasicInformation");
        $count = $basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")
            ->join("oa_social_payment as f on f.id=e.spid")
            ->join("oa_social_security_plan as g on g.id = e.usePlanId")
            ->field("a.id,a.name,a.unumber,a.department_id,d.department_name,e.payLand,e.householdType,
                e.payBase,e.foudBase,e.payAccount,f.medical_type,f.pension_type,f.unemployment_type,f.hurted_type,
                f.birthed_type,f.fund_type,f.large_medical_type,f.start_time,f.end_time,f.medical,f.pension,f.unemployment,f.hurted,
                f.birthed,f.fund,f.large_medical,f.medicalTwo,f.pensionTwo,f.unemploymentTwo,f.hurtedTwo,f.birthedTwo,f.fundTwo,
                f.large_medicalTwo,g.medicalRatio,g.pensionRatio,g.hurtedRatio,g.unemploymentRatio,g.birthedRatio,g.foudRatio,
                g.medicalRatioTwo,g.pensionRatioTwo,g.hurtedRatioTwo,g.unemploymentRatioTwo,g.birthedRatioTwo,g.foudRatioTwo")
            ->where($map)->count();

        $page = new Page($count, $pages);
        $totalPages = ceil($count / $pages);
        $page->totalPages = $totalPages;
        $pageNum = I("post.pageNum");
        /*
         * $pageNum是当前页数
         * $pages是每页显示的总条数
         */
        if ($pageNum) {
            $pageNum;
        } else {
            $pageNum = 1;
        }
        $offset = ($pageNum - 1) * $pages;
        $list =$basicInformation->table("oa_basic_information as a")->join("oa_personnel_information as b on b.bid=a.id")
            ->join("oa_organizational_structure as d on d.id=a.department_id")
            ->join("oa_social_security_information as e on e.bid=a.id")
            ->join("oa_social_payment as f on f.id=e.spid")
            ->join("oa_social_security_plan as g on g.id = e.usePlanId")
            ->field("a.id,a.name,a.unumber,a.department_id,d.department_name,e.payLand,e.householdType,
                e.payBase,e.foudBase,e.payAccount,f.medical_type,f.pension_type,f.unemployment_type,f.hurted_type,
                f.birthed_type,f.fund_type,f.large_medical_type,f.start_time,f.end_time,f.medical,f.pension,f.unemployment,f.hurted,
                f.birthed,f.fund,f.large_medical,f.medicalTwo,f.pensionTwo,f.unemploymentTwo,f.hurtedTwo,f.birthedTwo,f.fundTwo,
                f.large_medicalTwo,g.medicalRatio,g.pensionRatio,g.hurtedRatio,g.unemploymentRatio,g.birthedRatio,g.foudRatio,
                g.medicalRatioTwo,g.pensionRatioTwo,g.hurtedRatioTwo,g.unemploymentRatioTwo,g.birthedRatioTwo,g.foudRatioTwo")
            ->where($map)->limit($offset, $pages)->select();
        if($list){
            foreach ($list as &$val) {
                $val['medical_type'] = $val['medical_type'] == 1 ? '个人承担' : '公司承担';
                $val['pension_type'] = $val['pension_type'] == 1 ? '个人承担' : '公司承担';
                $val['unemployment_type'] = $val['unemployment_type'] == 1 ? '个人承担' : '公司承担';
                $val['hurted_type'] = $val['hurted_type'] == 1 ? '个人承担' : '公司承担';
                $val['birthed_type'] = $val['birthed_type'] == 1 ? '个人承担' : '公司承担';
                $val['fund_type'] = $val['fund_type'] == 1 ? '个人承担' : '公司承担';
                $val['large_medical_type'] = $val['large_medical_type'] == 1 ? '个人承担' : '公司承担';
            }
        }
        //计算总共交多少个月
        foreach ($list as &$val) {
            $val['start_time'] = date('Y-m', $val['start_time']);
            $val['end_time'] = date('Y-m', $val['end_time']);
        }

        foreach($list as $key=>$value){
            $star_time = explode('-',date("Y-m",$value["start_time"]));
            $end_time = explode('-',date("Y-m",$value["end_time"]));
            $list[$key]["months"] = abs($star_time[0] - $end_time[0]) * 12 + abs($star_time[1] - $end_time[1]);
        }


        $result = array(
            'page' => $page,
            'pageNum' => $pageNum,
            'result' => $list
        );
        if($result){
            $error = 0;
        }else{
            $error = 1;
        }
        self::jsons($error,$result);
    }








    public function exportExcel($expTitle,$expCellName,$expTableData){
        $xlsTitle = iconv('utf-8', 'gb2312', $expTitle);//文件名称
        $fileName = $expTitle;//or $xlsTitle 文件名称可根据自己情况设定
        $cellNum = count($expCellName);
        $dataNum = count($expTableData);
        vendor("PHPExcel.PHPExcel");
        $objPHPExcel = new \PHPExcel();
        $cellName = array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','AB','AC','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AW','AX','AY','AZ');
        $objPHPExcel->getActiveSheet(0)->mergeCells('A1:'.$cellName[$cellNum-1].'2');//合并单元格
        $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', $expTitle);//第一行标题
        for($i=0;$i<$cellNum;$i++){
            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellName[$i].'2', $expCellName[$i][1]);
        }

        // Miscellaneous glyphs, UTF-8
        for($i=0;$i<$dataNum;$i++){
            for($j=0;$j<$cellNum;$j++){
                $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j].($i+3), $expTableData[$i][$expCellName[$j][0]]);
            }
        }
        header('pragma:public');
        header('Content-type:application/vnd.ms-excel;charset=utf-8;name="'.$xlsTitle.'.xls"');
        header("Content-Disposition:attachment;filename=$fileName.xls");//attachment新窗口打印inline本窗口打印
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        exit;
    }
    function expUser($xlsName='', $xlsCell=array(), $xlsModel=''){//导出Excel
        $xlsName  = "User用户数据表";
        $xlsCell  = array(
            array('id','账号序列'),
            array('nickname','名字'),
            array('mobile','手机号'),
            array('status','状态'),
            array('addtime','创建时间'),
        );
        $xlsModel = M('Member');
        $xlsData  = $xlsModel->Field('id,nickname,mobile,status,addtime')->select();
        foreach ($xlsData as $k => $v)
        {
            $xlsData[$k]['status'] = 1 ? '正常':'锁定';
            $xlsData[$k]['addtime'] = date("Y-m-d H:i:s", $v['addtime']);
        }
        $this->exportExcel($xlsName,$xlsCell,$xlsData);
    }


    public function exportAll()
    {
        $basicInformation = D("BasicInformation");
        //sumXXX的是每一项个人和公司一起交了多少钱
        $list = $basicInformation->table("oa_basic_information as a")->join("oa_organizational_structure as b on b.id=a.department_id")
            ->join("oa_social_security_information as c on c.bid=a.id")->join("oa_social_security_plan as d on d.id=c.usePlanId")
            ->field("a.id,a.name,a.unumber,a.department_id,b.department_name as department,c.householdType,c.payLand,c.householdType,
            c.useMedical,c.usePension,c.useUnemployment,c.useFund,c.useHurted,c.useBirthed,c.medical,c.pension,c.unemployment,
            c.fund,c.medicalTwo,c.pensionTwo,c.unemploymentTwo,c.hurted,c.birthed,c.fundTwo,(c.medical+c.medicalTwo) as sumMed,
            (c.pension+c.pensionTwo) as sumPen,(c.unemployment+c.unemploymentTwo) as sumUne,(c.fund+c.fundTwo) as sumFun,
            (c.medical+c.pension+c.unemployment) as sumSelfSocial,c.payAccount,
            (c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as sumCompanySocial,
            (c.medical+c.pension+c.unemployment+c.medicalTwo+c.pensionTwo+c.unemploymentTwo+c.hurted+c.birthed) as sumSelfAndCompany,
            d.medicalRatio,d.pensionRatio,d.hurtedRatio,d.unemploymentRatio,d.birthedRatio,d.foudRatio,d.medicalRatioTwo,d.pensionRatioTwo,
            d.hurtedRatioTwo,d.unemploymentRatioTwo,d.birthedRatioTwo,d.foudRatioTwo,d.largeMedicalRatio,d.largeMedicalRatioTwo,d.medicalFixedFee,
            (d.medicalRatioTwo+d.largeMedicalRatioTwo) as sumCompanyMedicalRatio")
            ->where("")->select();

        //遍历得到使用的基金和社保以及计算后的基金和社保
        foreach($list as $key=>$value){
            $arr[$key]["medicalRatio"] = $value["medicalRatio"];
            $arr[$key]["pensionRatio"] = $value["pensionRatio"];
            $arr[$key]["hurtedRatio"] = $value["hurtedRatio"];
            $arr[$key]["unemploymentRatio"] = $value["unemploymentRatio"];
            $arr[$key]["birthedRatio"] = $value["birthedRatio"];
            $arr[$key]["foudRatio"] = $value["foudRatio"];
            $arr[$key]["medicalRatioTwo"] = $value["medicalRatioTwo"];
            $arr[$key]["pensionRatioTwo"] = $value["pensionRatioTwo"];
            $arr[$key]["hurtedRatioTwo"] = $value["hurtedRatioTwo"];
            $arr[$key]["unemploymentRatioTwo"] = $value["unemploymentRatioTwo"];
            $arr[$key]["birthedRatioTwo"] = $value["birthedRatioTwo"];
            $arr[$key]["foudRatioTwo"] = $value["foudRatioTwo"];
            $arr[$key]["largeMedicalRatio"] = $value["largeMedicalRatio"];
            $arr[$key]["largeMedicalRatioTwo"] = $value["largeMedicalRatioTwo"];
            $arr[$key]["medicalFixedFee"] = $value["medicalFixedFee"];
            $arr[$key]["sumCompanyMedicalRatio"] = $value["sumCompanyMedicalRatio"];

            //使用的医疗基数
            $arr[$key]["useMedical"] = intval($value["useMedical"]);
            //使用的养老基数
            $arr[$key]["usePension"] = intval($value["usePension"]);
            //使用的失业基数
            $arr[$key]["useUnemployment"] = intval($value["useUnemployment"]);
            //使用的公积金基数
            $arr[$key]["useFund"] = intval($value["useFund"]);
            //使用的工伤基数
            $arr[$key]["useHurted"] = intval($value["useHurted"]) ;
            //使用的生育基数
            $arr[$key]["useBirthed"] = intval($value["useBirthed"]);
            //计算的医疗个人
            $arr[$key]["medical"] = intval($value["medical"]);
            //计算的医疗公司
            $arr[$key]["medicalTwo"] = intval($value["medicalTwo"]);
            //计算的养老个人
            $arr[$key]["pension"] = intval($value["pension"]);
            //计算的养老公司
            $arr[$key]["pensionTwo"] = intval($value["pensionTwo"]);
            //计算的失业个人
            $arr[$key]["unemployment"] = intval($value["unemployment"]);
            //计算的失业公司
            $arr[$key]["unemploymentTwo"] = intval($value["unemploymentTwo"]);
            //计算的工伤公司
            $arr[$key]["hurted"] = intval($value["hurted"]);
            //计算的生育公司
            $arr[$key]["birthed"] = intval($value["birthed"]);
            //计算的公积金个人
            $arr[$key]["fund"] = intval($value["fund"]);
            //计算的公积金公司
            $arr[$key]["fundTwo"] = intval($value["fundTwo"]);

            //社保个人
            $arr[$key]["sumSelfSocial"] = intval($value["sumSelfSocial"]);
            //社保公司
            $arr[$key]["sumCompanySocial"] = intval($value["sumCompanySocial"]);
            $arr[$key]["sumSelfAndCompany"] = intval($value["sumSelfAndCompany"]);
            //个人社保和公积金
            $arr[$key]["sumSelfSocialAndFund"] = $arr[$key]["sumSelfSocial"]+$arr[$key]["fund"];
            //公司社保和公积金
            $arr[$key]["sumCompanySocialAndFund"] = $arr[$key]["sumCompanySocial"]+$arr[$key]["fundTwo"];
        }


        $item=array();
        foreach($arr as $k=>$v){
            //计算使用的基数的竖列的和
            $item['countUseMedical']+=$v['useMedical'];
            $item['countUsePension']+=$v['usePension'];
            $item['countUseUnemployment']+=$v['useUnemployment'];
            $item['countUseFund']+=$v['useFund'];
            $item['countUseHurted']+=$v['useHurted'];
            $item['countUseBirthed']+=$v['useBirthed'];
            //计算最终缴费的每列的和
            $item['countMedical']+=$v['medical'];
            $item['countMedicalTwo']+=$v['medicalTwo'];
            $item['countPension']+=$v['pension'];
            $item['countPensionTwo']+=$v['pensionTwo'];
            $item['countUnemployment']+=$v['unemployment'];
            $item['countUnemploymentTwo']+=$v['unemploymentTwo'];
            $item['countHurted']+=$v['hurted'];
            $item['countBirthed']+=$v['birthed'];
            $item['countFund']+=$v['fund'];
            $item['countFundTwo']+=$v['fundTwo'];

            //返回所有人社保个人之和以及所有人社保公司之和以及个人社保和公司社保的和
            $item['allPeopleSelfSocialSum']+=$v['sumSelfSocial'];
            $item['allPeopleCompanySocialSum']+=$v['sumCompanySocial'];
            $item['allPeopleSelfAndCompanySocialSum']+=$v['sumSelfAndCompany'];

            //得到每个人和公司的社保合计和公积金合计以及每个人和公司的社保和公积金的合计
            $item['sumSelfSocialAndFund'] = $v["sumSelfSocialAndFund"];
            $item['sumCompanySocialAndFund'] = $v["sumCompanySocialAndFund"];
            $item['allPeopleSocialAndFund'] = $item['sumSelfSocialAndFund']+$item['sumCompanySocialAndFund'];

        }
        //分别计算个人社保和公司社保的每一项和的和
//        $sumMoney=array();
        //医疗和
        $item["countMedicalAndMedicalTwo"] = $item['countMedical']+$item['countMedicalTwo'];
        //养老
        $item["countPensionAndPensionTwo"] = $item['countPension']+$item['countPensionTwo'];
        //失业
        $item["countUnemploymentAndUnemploymentTwo"] = $item['countUnemployment']+$item['countUnemploymentTwo'];
        //公积金
        $item["countFundAndFundTwo"] = $item['countFund']+$item['countFundTwo'];

        //个人社保和公积金合计
        $item["countSelfSocialAndFund"] = $item['sumSelfSocial']+$item['countFund'];
        //公司社保和公积金合计
        $result = array(
            'result' => $list,
            'item'=>$item
        );
        vendor("PHPExcel.PHPExcel");
        $temPath = "./Public/Template/sbtzmb.xlsx";
        //检查文件路径
        if(!file_exists($temPath)){
            $this->error('模板不存在');
            return;
        }
        $objPHPExcel = new \PHPExcel();
        $phpexcel =  \PHPExcel_IOFactory::createReader("Excel2007")->load($temPath);
        foreach($result as $items){
            for($i=0;$i<count($list)-1;$i++){
                $phpexcel->getActiveSheet(0)->setCellValue('A'.($i+3), $items['id']);
                $phpexcel->getActiveSheet(0)->setCellValue('B'.($i+3), $items['unumber']);
                $phpexcel->getActiveSheet(0)->setCellValue('C'.($i+3), $items['name']);
                $phpexcel->getActiveSheet(0)->setCellValue('D'.($i+3), $items['department']);
                $phpexcel->getActiveSheet(0)->setCellValue('E'.($i+3), $items['householdType']);
                $phpexcel->getActiveSheet(0)->setCellValue('F'.($i+3), $items['payAccount']);
                //医疗
                $phpexcel->getActiveSheet(0)->setCellValue('G'.($i+3), $items['useMedical']);
                $phpexcel->getActiveSheet(0)->setCellValue('H'.($i+3), $items['medicalRatio']);
                $phpexcel->getActiveSheet(0)->setCellValue('I'.($i+3), $items['medicalFixedFee']);
                $phpexcel->getActiveSheet(0)->setCellValue('J'.($i+3), $items['medical']);
                $phpexcel->getActiveSheet(0)->setCellValue('K'.($i+3), $items['medicalRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('L'.($i+3), $items['medicalTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('M'.($i+3), $items['countMedicalAndMedicalTwo']);
                //养老
                $phpexcel->getActiveSheet(0)->setCellValue('N'.($i+3), $items['usePension']);
                $phpexcel->getActiveSheet(0)->setCellValue('O'.($i+3), $items['pensionRatio']);
                $phpexcel->getActiveSheet(0)->setCellValue('P'.($i+3), $items['pension']);
                $phpexcel->getActiveSheet(0)->setCellValue('Q'.($i+3), $items['pensionRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('R'.($i+3), $items['pensionTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('S'.($i+3), $items['countPensionAndPensionTwo']);
                //失业
                $phpexcel->getActiveSheet(0)->setCellValue('T'.($i+3), $items['useUnemployment']);
                $phpexcel->getActiveSheet(0)->setCellValue('U'.($i+3), $items['unemploymentRatio']);
                $phpexcel->getActiveSheet(0)->setCellValue('V'.($i+3), $items['unemployment']);
                $phpexcel->getActiveSheet(0)->setCellValue('W'.($i+3), $items['unemploymentRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('X'.($i+3), $items['unemploymentTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('Y'.($i+3), $items['countUnemploymentAndUnemploymentTwo']);
                //工伤
                $phpexcel->getActiveSheet(0)->setCellValue('Z'.($i+3), $items['useHurted']);
                $phpexcel->getActiveSheet(0)->setCellValue('AA'.($i+3), $items['hurtedRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('AB'.($i+3), $items['hurted']);
                //生育
                $phpexcel->getActiveSheet(0)->setCellValue('AC'.($i+3), $items['useBirthed']);
                $phpexcel->getActiveSheet(0)->setCellValue('AD'.($i+3), $items['birthedRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('AE'.($i+3), $items['birthed']);
                //社保合计
                $phpexcel->getActiveSheet(0)->setCellValue('AF'.($i+3), $items['sumSelfSocial']);
                $phpexcel->getActiveSheet(0)->setCellValue('AG'.($i+3), $items['sumCompanySocial']);
                $phpexcel->getActiveSheet(0)->setCellValue('AH'.($i+3), $items['sumSelfAndCompany']);
                //公积金
                $phpexcel->getActiveSheet(0)->setCellValue('AI'.($i+3), $items['foudRatio']);
                $phpexcel->getActiveSheet(0)->setCellValue('AJ'.($i+3), $items['fund']);
                $phpexcel->getActiveSheet(0)->setCellValue('AK'.($i+3), $items['foudRatioTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('AL'.($i+3), $items['fundTwo']);
                $phpexcel->getActiveSheet(0)->setCellValue('AM'.($i+3), $items['countFundAndFundTwo']);
                //社保公积金合计
                $phpexcel->getActiveSheet(0)->setCellValue('AN'.($i+3), $items['sumSelfSocialAndFund']);
                $phpexcel->getActiveSheet(0)->setCellValue('AO'.($i+3), $items['sumCompanySocialAndFund']);
                $phpexcel->getActiveSheet(0)->setCellValue('AP'.($i+3), $items['allPeopleSocialAndFund']);
            }

            // sheet命名
            $objPHPExcel->getActiveSheet()->setTitle('社保台账表');
            $objPHPExcel->setActiveSheetIndex(0);
            // excel头参数
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="社保台账表('.date('Ymd-His').').xlsx"'); //日期为文件名后缀
            header('Cache-Control: max-age=0');
            $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007'); //excel5为xls格式，excel2007为xlsx格式
            $objWriter->save('php://output');
        }
    }
}